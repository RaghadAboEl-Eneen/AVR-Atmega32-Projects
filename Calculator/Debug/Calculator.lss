
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000272c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000272c  000027c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800082  00800082  000027e2  2**0
                  ALLOC
  3 .stab         00001af4  00000000  00000000  000027e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f2a  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005202  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005342  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000054b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009181  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000994f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <main>
      8a:	0c 94 94 13 	jmp	0x2728	; 0x2728 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f

	//1-Set RS value to low for command.
	DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>

	//2- Set RW value to low for write.
	DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>

	//3- Send command to LCD.
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <DIO_u8SetPortValue>

	//4- Send E(nable) pulse to LCD.
	DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e4       	ldi	r19, 0x40	; 64
     b9e:	4c e1       	ldi	r20, 0x1C	; 28
     ba0:	55 e4       	ldi	r21, 0x45	; 69
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	8a ef       	ldi	r24, 0xFA	; 250
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>

}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f

    	//1-Set RS value to high for data.
		DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>

		//2- Set RW value to low for write.
		DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>

		//3- Set data to LCD.
		DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <DIO_u8SetPortValue>

		//4- Send E(nable) pulse to LCD.
		DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e4       	ldi	r19, 0x40	; 64
     cda:	4c e1       	ldi	r20, 0x1C	; 28
     cdc:	55 e4       	ldi	r21, 0x45	; 69
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	8a ef       	ldi	r24, 0xFA	; 250
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CONTROL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>



}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(void) {
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e4       	ldi	r19, 0x40	; 64
     dee:	4c e1       	ldi	r20, 0x1C	; 28
     df0:	55 e4       	ldi	r21, 0x45	; 69
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	8a ef       	ldi	r24, 0xFA	; 250
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01

	//1- Delay for more than 30 milliseconds.
	_delay_ms(40);

	//2- Function set command: 2 lines(DB3), Font = 5*7(DB2).
	CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	//3- Display on off Control: Display on, Cursor off, Blinking off.
	CLCD_voidSendCommand(0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	//4- Display clear.
	CLCD_voidSendCommand(1);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidWriteString>:


void CLCD_voidWriteString(const char * Copy_pchString){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_voidWriteString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02

	u8 LoopCounter = 0;
     eea:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pchString != NULL) {
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	9b 81       	ldd	r25, Y+3	; 0x03
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	d1 f0       	breq	.+52     	; 0xf28 <CLCD_voidWriteString+0x4e>
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <CLCD_voidWriteString+0x38>

		while(*(Copy_pchString+LoopCounter)) {
			CLCD_voidSendData((char)*(Copy_pchString+LoopCounter));
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	fc 01       	movw	r30, r24
     f02:	e2 0f       	add	r30, r18
     f04:	f3 1f       	adc	r31, r19
     f06:	80 81       	ld	r24, Z
     f08:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			LoopCounter++;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	89 83       	std	Y+1, r24	; 0x01
void CLCD_voidWriteString(const char * Copy_pchString){

	u8 LoopCounter = 0;
	if(Copy_pchString != NULL) {

		while(*(Copy_pchString+LoopCounter)) {
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	9b 81       	ldd	r25, Y+3	; 0x03
     f1c:	fc 01       	movw	r30, r24
     f1e:	e2 0f       	add	r30, r18
     f20:	f3 1f       	adc	r31, r19
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	39 f7       	brne	.-50     	; 0xef6 <CLCD_voidWriteString+0x1c>
			CLCD_voidSendData((char)*(Copy_pchString+LoopCounter));
			LoopCounter++;
		}
	}

}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number) {
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	63 97       	sbiw	r28, 0x13	; 19
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	6a 87       	std	Y+10, r22	; 0x0a
     f4a:	7b 87       	std	Y+11, r23	; 0x0b
     f4c:	8c 87       	std	Y+12, r24	; 0x0c
     f4e:	9d 87       	std	Y+13, r25	; 0x0d
	sprintf(arr,"%d",Copy_u32Number);
	CLCD_voidWriteString(arr);



}
     f50:	2d b7       	in	r18, 0x3d	; 61
     f52:	3e b7       	in	r19, 0x3e	; 62
     f54:	3b 8b       	std	Y+19, r19	; 0x13
     f56:	2a 8b       	std	Y+18, r18	; 0x12
		}
	}

}

void CLCD_voidSendNumber(u32 Copy_u32Number) {
     f58:	8d b7       	in	r24, 0x3d	; 61
     f5a:	9e b7       	in	r25, 0x3e	; 62
     f5c:	9f 87       	std	Y+15, r25	; 0x0f
     f5e:	8e 87       	std	Y+14, r24	; 0x0e
	u32 Local_u32TempValue = Copy_u32Number;
     f60:	8a 85       	ldd	r24, Y+10	; 0x0a
     f62:	9b 85       	ldd	r25, Y+11	; 0x0b
     f64:	ac 85       	ldd	r26, Y+12	; 0x0c
     f66:	bd 85       	ldd	r27, Y+13	; 0x0d
     f68:	8c 83       	std	Y+4, r24	; 0x04
     f6a:	9d 83       	std	Y+5, r25	; 0x05
     f6c:	ae 83       	std	Y+6, r26	; 0x06
     f6e:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_u8DigitCounter = 0 , Local_u8Counter = 0 , Local_u8Remainder;
     f70:	1b 82       	std	Y+3, r1	; 0x03
     f72:	1a 82       	std	Y+2, r1	; 0x02
     f74:	15 c0       	rjmp	.+42     	; 0xfa0 <CLCD_voidSendNumber+0x6c>

	while(Local_u32TempValue > 0) {
		Local_u32TempValue/=10;
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	ae 81       	ldd	r26, Y+6	; 0x06
     f7c:	bf 81       	ldd	r27, Y+7	; 0x07
     f7e:	2a e0       	ldi	r18, 0x0A	; 10
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodsi4>
     f8e:	da 01       	movw	r26, r20
     f90:	c9 01       	movw	r24, r18
     f92:	8c 83       	std	Y+4, r24	; 0x04
     f94:	9d 83       	std	Y+5, r25	; 0x05
     f96:	ae 83       	std	Y+6, r26	; 0x06
     f98:	bf 83       	std	Y+7, r27	; 0x07
		Local_u8DigitCounter++;
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidSendNumber(u32 Copy_u32Number) {
	u32 Local_u32TempValue = Copy_u32Number;
	u8 Local_u8DigitCounter = 0 , Local_u8Counter = 0 , Local_u8Remainder;

	while(Local_u32TempValue > 0) {
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	ae 81       	ldd	r26, Y+6	; 0x06
     fa6:	bf 81       	ldd	r27, Y+7	; 0x07
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	a1 05       	cpc	r26, r1
     fac:	b1 05       	cpc	r27, r1
     fae:	19 f7       	brne	.-58     	; 0xf76 <CLCD_voidSendNumber+0x42>
		Local_u32TempValue/=10;
		Local_u8DigitCounter++;
	}

	char arr[Local_u8DigitCounter];
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	2d b7       	in	r18, 0x3d	; 61
     fb8:	3e b7       	in	r19, 0x3e	; 62
     fba:	28 1b       	sub	r18, r24
     fbc:	39 0b       	sbc	r19, r25
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	3e bf       	out	0x3e, r19	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	2d bf       	out	0x3d, r18	; 61
     fc8:	8d b7       	in	r24, 0x3d	; 61
     fca:	9e b7       	in	r25, 0x3e	; 62
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	99 8b       	std	Y+17, r25	; 0x11
     fd0:	88 8b       	std	Y+16, r24	; 0x10
     fd2:	88 89       	ldd	r24, Y+16	; 0x10
     fd4:	99 89       	ldd	r25, Y+17	; 0x11
     fd6:	00 96       	adiw	r24, 0x00	; 0
     fd8:	99 8b       	std	Y+17, r25	; 0x11
     fda:	88 8b       	std	Y+16, r24	; 0x10
     fdc:	28 89       	ldd	r18, Y+16	; 0x10
     fde:	39 89       	ldd	r19, Y+17	; 0x11
     fe0:	39 87       	std	Y+9, r19	; 0x09
     fe2:	28 87       	std	Y+8, r18	; 0x08
	sprintf(arr,"%d",Copy_u32Number);
     fe4:	88 85       	ldd	r24, Y+8	; 0x08
     fe6:	99 85       	ldd	r25, Y+9	; 0x09
     fe8:	2d b7       	in	r18, 0x3d	; 61
     fea:	3e b7       	in	r19, 0x3e	; 62
     fec:	28 50       	subi	r18, 0x08	; 8
     fee:	30 40       	sbci	r19, 0x00	; 0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	3e bf       	out	0x3e, r19	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	2d bf       	out	0x3d, r18	; 61
     ffa:	ed b7       	in	r30, 0x3d	; 61
     ffc:	fe b7       	in	r31, 0x3e	; 62
     ffe:	31 96       	adiw	r30, 0x01	; 1
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
    1004:	80 e6       	ldi	r24, 0x60	; 96
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	93 83       	std	Z+3, r25	; 0x03
    100a:	82 83       	std	Z+2, r24	; 0x02
    100c:	8a 85       	ldd	r24, Y+10	; 0x0a
    100e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1010:	ac 85       	ldd	r26, Y+12	; 0x0c
    1012:	bd 85       	ldd	r27, Y+13	; 0x0d
    1014:	84 83       	std	Z+4, r24	; 0x04
    1016:	95 83       	std	Z+5, r25	; 0x05
    1018:	a6 83       	std	Z+6, r26	; 0x06
    101a:	b7 83       	std	Z+7, r27	; 0x07
    101c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <sprintf>
    1020:	8d b7       	in	r24, 0x3d	; 61
    1022:	9e b7       	in	r25, 0x3e	; 62
    1024:	08 96       	adiw	r24, 0x08	; 8
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	9e bf       	out	0x3e, r25	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	8d bf       	out	0x3d, r24	; 61
	CLCD_voidWriteString(arr);
    1030:	88 85       	ldd	r24, Y+8	; 0x08
    1032:	99 85       	ldd	r25, Y+9	; 0x09
    1034:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidWriteString>
    1038:	2e 85       	ldd	r18, Y+14	; 0x0e
    103a:	3f 85       	ldd	r19, Y+15	; 0x0f
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	3e bf       	out	0x3e, r19	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	2d bf       	out	0x3d, r18	; 61



}
    1046:	8a 89       	ldd	r24, Y+18	; 0x12
    1048:	9b 89       	ldd	r25, Y+19	; 0x13
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	9e bf       	out	0x3e, r25	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	8d bf       	out	0x3d, r24	; 61
    1054:	63 96       	adiw	r28, 0x13	; 19
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <CLCD_voidGotoXY>:

void CLCD_voidGotoXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <CLCD_voidGotoXY+0x6>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMAddress;
	if(Copy_u8YPos ==0)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 23       	and	r24, r24
    107a:	19 f4       	brne	.+6      	; 0x1082 <CLCD_voidGotoXY+0x1c>
	{
		/*Check if in first line*/
		Local_u8DDRAMAddress=Copy_u8XPos;
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	06 c0       	rjmp	.+12     	; 0x108e <CLCD_voidGotoXY+0x28>
	}
	else if(Copy_u8YPos==1)
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	19 f4       	brne	.+6      	; 0x108e <CLCD_voidGotoXY+0x28>
	{
		/*Check if in second line*/
		Local_u8DDRAMAddress=0x40+Copy_u8XPos;
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 5c       	subi	r24, 0xC0	; 192
    108c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Setbit number 7 for SetDDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8DDRAMAddress+128);
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	80 58       	subi	r24, 0x80	; 128
    1092:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	27 97       	sbiw	r28, 0x07	; 7
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	9c 83       	std	Y+4, r25	; 0x04
    10b8:	8b 83       	std	Y+3, r24	; 0x03
    10ba:	6d 83       	std	Y+5, r22	; 0x05
    10bc:	4e 83       	std	Y+6, r20	; 0x06
    10be:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRamAddress,Local_u8Counter;

	/*1- calculate CGRAM address knowing that every pattern consumes 8 bytes*/
	Local_u8CGRamAddress= Copy_u8PatternNumber*8;
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	8a 83       	std	Y+2, r24	; 0x02

	/*2-Send SET CGRAM address command to LCD with setting bit6 ,clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	80 5c       	subi	r24, 0xC0	; 192
    10d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*3- write the pattern into CGRAM*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	0e c0       	rjmp	.+28     	; 0x10fc <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	80 81       	ld	r24, Z
    10f2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

	/*2-Send SET CGRAM address command to LCD with setting bit6 ,clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);

	/*3- write the pattern into CGRAM*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	88 30       	cpi	r24, 0x08	; 8
    1100:	78 f3       	brcs	.-34     	; 0x10e0 <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	/*4- Back to the DDRAM to display the special pattern*/
	CLCD_voidGotoXY(Copy_u8XPos,Copy_u8YPos);
    1102:	8e 81       	ldd	r24, Y+6	; 0x06
    1104:	6f 81       	ldd	r22, Y+7	; 0x07
    1106:	0e 94 33 08 	call	0x1066	; 0x1066 <CLCD_voidGotoXY>

	/*5- Display the special pattern*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
    1110:	27 96       	adiw	r28, 0x07	; 7
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction) {
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	28 97       	sbiw	r28, 0x08	; 8
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	6b 83       	std	Y+3, r22	; 0x03
    113a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    113c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7 ) {
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	88 30       	cpi	r24, 0x08	; 8
    1142:	08 f0       	brcs	.+2      	; 0x1146 <DIO_u8SetPinDirection+0x24>
    1144:	f4 c0       	rjmp	.+488    	; 0x132e <DIO_u8SetPinDirection+0x20c>

		if(Copy_u8Direction == DIO_u8PIN_INPUT) {
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	88 23       	and	r24, r24
    114a:	09 f0       	breq	.+2      	; 0x114e <DIO_u8SetPinDirection+0x2c>
    114c:	77 c0       	rjmp	.+238    	; 0x123c <DIO_u8SetPinDirection+0x11a>
            switch(Copy_u8Port) {
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	38 87       	std	Y+8, r19	; 0x08
    1156:	2f 83       	std	Y+7, r18	; 0x07
    1158:	8f 81       	ldd	r24, Y+7	; 0x07
    115a:	98 85       	ldd	r25, Y+8	; 0x08
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	59 f1       	breq	.+86     	; 0x11b8 <DIO_u8SetPinDirection+0x96>
    1162:	2f 81       	ldd	r18, Y+7	; 0x07
    1164:	38 85       	ldd	r19, Y+8	; 0x08
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_u8SetPinDirection+0x54>
    116c:	8f 81       	ldd	r24, Y+7	; 0x07
    116e:	98 85       	ldd	r25, Y+8	; 0x08
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	69 f0       	breq	.+26     	; 0x118e <DIO_u8SetPinDirection+0x6c>
    1174:	60 c0       	rjmp	.+192    	; 0x1236 <DIO_u8SetPinDirection+0x114>
    1176:	2f 81       	ldd	r18, Y+7	; 0x07
    1178:	38 85       	ldd	r19, Y+8	; 0x08
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	89 f1       	breq	.+98     	; 0x11e2 <DIO_u8SetPinDirection+0xc0>
    1180:	8f 81       	ldd	r24, Y+7	; 0x07
    1182:	98 85       	ldd	r25, Y+8	; 0x08
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <DIO_u8SetPinDirection+0x6a>
    118a:	40 c0       	rjmp	.+128    	; 0x120c <DIO_u8SetPinDirection+0xea>
    118c:	54 c0       	rjmp	.+168    	; 0x1236 <DIO_u8SetPinDirection+0x114>

            case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
    118e:	aa e3       	ldi	r26, 0x3A	; 58
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ea e3       	ldi	r30, 0x3A	; 58
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_u8SetPinDirection+0x8a>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_u8SetPinDirection+0x86>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	bd c0       	rjmp	.+378    	; 0x1332 <DIO_u8SetPinDirection+0x210>
            case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8Pin); break;
    11b8:	a7 e3       	ldi	r26, 0x37	; 55
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e7 e3       	ldi	r30, 0x37	; 55
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_u8SetPinDirection+0xb4>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_u8SetPinDirection+0xb0>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	a8 c0       	rjmp	.+336    	; 0x1332 <DIO_u8SetPinDirection+0x210>
            case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
    11e2:	a4 e3       	ldi	r26, 0x34	; 52
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e4 e3       	ldi	r30, 0x34	; 52
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_u8SetPinDirection+0xde>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_u8SetPinDirection+0xda>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	93 c0       	rjmp	.+294    	; 0x1332 <DIO_u8SetPinDirection+0x210>
            case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
    120c:	a1 e3       	ldi	r26, 0x31	; 49
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e1 e3       	ldi	r30, 0x31	; 49
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8SetPinDirection+0x108>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8SetPinDirection+0x104>
    122e:	80 95       	com	r24
    1230:	84 23       	and	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	7e c0       	rjmp	.+252    	; 0x1332 <DIO_u8SetPinDirection+0x210>
            default: Local_u8ErrorState = NOOK;          break;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	7b c0       	rjmp	.+246    	; 0x1332 <DIO_u8SetPinDirection+0x210>


            }
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT) {
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	09 f0       	breq	.+2      	; 0x1244 <DIO_u8SetPinDirection+0x122>
    1242:	72 c0       	rjmp	.+228    	; 0x1328 <DIO_u8SetPinDirection+0x206>
			switch(Copy_u8Port){
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3e 83       	std	Y+6, r19	; 0x06
    124c:	2d 83       	std	Y+5, r18	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	49 f1       	breq	.+82     	; 0x12aa <DIO_u8SetPinDirection+0x188>
    1258:	2d 81       	ldd	r18, Y+5	; 0x05
    125a:	3e 81       	ldd	r19, Y+6	; 0x06
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <DIO_u8SetPinDirection+0x14a>
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_u8SetPinDirection+0x160>
    126a:	5b c0       	rjmp	.+182    	; 0x1322 <DIO_u8SetPinDirection+0x200>
    126c:	2d 81       	ldd	r18, Y+5	; 0x05
    126e:	3e 81       	ldd	r19, Y+6	; 0x06
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	71 f1       	breq	.+92     	; 0x12d2 <DIO_u8SetPinDirection+0x1b0>
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	e9 f1       	breq	.+122    	; 0x12fa <DIO_u8SetPinDirection+0x1d8>
    1280:	50 c0       	rjmp	.+160    	; 0x1322 <DIO_u8SetPinDirection+0x200>
		   case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
    1282:	aa e3       	ldi	r26, 0x3A	; 58
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ea e3       	ldi	r30, 0x3A	; 58
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_u8SetPinDirection+0x17e>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_u8SetPinDirection+0x17a>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	44 c0       	rjmp	.+136    	; 0x1332 <DIO_u8SetPinDirection+0x210>
           case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
    12aa:	a7 e3       	ldi	r26, 0x37	; 55
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e7 e3       	ldi	r30, 0x37	; 55
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8SetPinDirection+0x1a6>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8SetPinDirection+0x1a2>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	30 c0       	rjmp	.+96     	; 0x1332 <DIO_u8SetPinDirection+0x210>
           case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
    12d2:	a4 e3       	ldi	r26, 0x34	; 52
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e4 e3       	ldi	r30, 0x34	; 52
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_u8SetPinDirection+0x1ce>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_u8SetPinDirection+0x1ca>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	1c c0       	rjmp	.+56     	; 0x1332 <DIO_u8SetPinDirection+0x210>
           case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
    12fa:	a1 e3       	ldi	r26, 0x31	; 49
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e1 e3       	ldi	r30, 0x31	; 49
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8SetPinDirection+0x1f6>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_u8SetPinDirection+0x1f2>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <DIO_u8SetPinDirection+0x210>
           default: Local_u8ErrorState = NOOK;          break;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <DIO_u8SetPinDirection+0x210>
			}
		}
		else {
			Local_u8ErrorState = NOOK;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_u8SetPinDirection+0x210>
		}

	}
	else {
		Local_u8ErrorState = NOOK;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrorState;
    1332:	89 81       	ldd	r24, Y+1	; 0x01

}
    1334:	28 96       	adiw	r28, 0x08	; 8
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction) {
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <DIO_u8SetPortDirection+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <DIO_u8SetPortDirection+0x8>
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1358:	19 82       	std	Y+1, r1	; 0x01

	 switch(Copy_u8Port) {
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	d1 f0       	breq	.+52     	; 0x13a2 <DIO_u8SetPortDirection+0x5c>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <DIO_u8SetPortDirection+0x3c>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	61 f0       	breq	.+24     	; 0x1398 <DIO_u8SetPortDirection+0x52>
    1380:	1f c0       	rjmp	.+62     	; 0x13c0 <DIO_u8SetPortDirection+0x7a>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	81 f0       	breq	.+32     	; 0x13ac <DIO_u8SetPortDirection+0x66>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	81 f0       	breq	.+32     	; 0x13b6 <DIO_u8SetPortDirection+0x70>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <DIO_u8SetPortDirection+0x7a>

	 case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	80 83       	st	Z, r24
    13a0:	11 c0       	rjmp	.+34     	; 0x13c4 <DIO_u8SetPortDirection+0x7e>
	 case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    13a2:	e7 e3       	ldi	r30, 0x37	; 55
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	80 83       	st	Z, r24
    13aa:	0c c0       	rjmp	.+24     	; 0x13c4 <DIO_u8SetPortDirection+0x7e>
	 case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    13ac:	e4 e3       	ldi	r30, 0x34	; 52
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	80 83       	st	Z, r24
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <DIO_u8SetPortDirection+0x7e>
	 case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    13b6:	e1 e3       	ldi	r30, 0x31	; 49
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	80 83       	st	Z, r24
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_u8SetPortDirection+0x7e>
	 default: Local_u8ErrorState = NOOK;        break;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	89 83       	std	Y+1, r24	; 0x01
	 }




	return Local_u8ErrorState;
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value) {
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	28 97       	sbiw	r28, 0x08	; 8
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	6b 83       	std	Y+3, r22	; 0x03
    13ee:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    13f0:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Pin<= DIO_u8PIN7 ) {
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	88 30       	cpi	r24, 0x08	; 8
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <DIO_u8SetPinValue+0x24>
    13f8:	f4 c0       	rjmp	.+488    	; 0x15e2 <DIO_u8SetPinValue+0x20c>

		if(Copy_u8Value == DIO_u8PIN_LOW) {
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	88 23       	and	r24, r24
    13fe:	09 f0       	breq	.+2      	; 0x1402 <DIO_u8SetPinValue+0x2c>
    1400:	77 c0       	rjmp	.+238    	; 0x14f0 <DIO_u8SetPinValue+0x11a>
            switch(Copy_u8Port) {
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	38 87       	std	Y+8, r19	; 0x08
    140a:	2f 83       	std	Y+7, r18	; 0x07
    140c:	8f 81       	ldd	r24, Y+7	; 0x07
    140e:	98 85       	ldd	r25, Y+8	; 0x08
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	59 f1       	breq	.+86     	; 0x146c <DIO_u8SetPinValue+0x96>
    1416:	2f 81       	ldd	r18, Y+7	; 0x07
    1418:	38 85       	ldd	r19, Y+8	; 0x08
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	2c f4       	brge	.+10     	; 0x142a <DIO_u8SetPinValue+0x54>
    1420:	8f 81       	ldd	r24, Y+7	; 0x07
    1422:	98 85       	ldd	r25, Y+8	; 0x08
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	69 f0       	breq	.+26     	; 0x1442 <DIO_u8SetPinValue+0x6c>
    1428:	60 c0       	rjmp	.+192    	; 0x14ea <DIO_u8SetPinValue+0x114>
    142a:	2f 81       	ldd	r18, Y+7	; 0x07
    142c:	38 85       	ldd	r19, Y+8	; 0x08
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	89 f1       	breq	.+98     	; 0x1496 <DIO_u8SetPinValue+0xc0>
    1434:	8f 81       	ldd	r24, Y+7	; 0x07
    1436:	98 85       	ldd	r25, Y+8	; 0x08
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	91 05       	cpc	r25, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <DIO_u8SetPinValue+0x6a>
    143e:	40 c0       	rjmp	.+128    	; 0x14c0 <DIO_u8SetPinValue+0xea>
    1440:	54 c0       	rjmp	.+168    	; 0x14ea <DIO_u8SetPinValue+0x114>

            case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8SetPinValue+0x8a>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8SetPinValue+0x86>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	bd c0       	rjmp	.+378    	; 0x15e6 <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
    146c:	a8 e3       	ldi	r26, 0x38	; 56
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e8 e3       	ldi	r30, 0x38	; 56
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_u8SetPinValue+0xb4>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_u8SetPinValue+0xb0>
    148e:	80 95       	com	r24
    1490:	84 23       	and	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	a8 c0       	rjmp	.+336    	; 0x15e6 <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
    1496:	a5 e3       	ldi	r26, 0x35	; 53
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e5 e3       	ldi	r30, 0x35	; 53
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_u8SetPinValue+0xde>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_u8SetPinValue+0xda>
    14b8:	80 95       	com	r24
    14ba:	84 23       	and	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	93 c0       	rjmp	.+294    	; 0x15e6 <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    14c0:	a2 e3       	ldi	r26, 0x32	; 50
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e2 e3       	ldi	r30, 0x32	; 50
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <DIO_u8SetPinValue+0x108>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <DIO_u8SetPinValue+0x104>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	7e c0       	rjmp	.+252    	; 0x15e6 <DIO_u8SetPinValue+0x210>
            default: Local_u8ErrorState = NOOK;          break;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	7b c0       	rjmp	.+246    	; 0x15e6 <DIO_u8SetPinValue+0x210>


            }
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH) {
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <DIO_u8SetPinValue+0x122>
    14f6:	72 c0       	rjmp	.+228    	; 0x15dc <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port) {
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3e 83       	std	Y+6, r19	; 0x06
    1500:	2d 83       	std	Y+5, r18	; 0x05
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	49 f1       	breq	.+82     	; 0x155e <DIO_u8SetPinValue+0x188>
    150c:	2d 81       	ldd	r18, Y+5	; 0x05
    150e:	3e 81       	ldd	r19, Y+6	; 0x06
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <DIO_u8SetPinValue+0x14a>
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	61 f0       	breq	.+24     	; 0x1536 <DIO_u8SetPinValue+0x160>
    151e:	5b c0       	rjmp	.+182    	; 0x15d6 <DIO_u8SetPinValue+0x200>
    1520:	2d 81       	ldd	r18, Y+5	; 0x05
    1522:	3e 81       	ldd	r19, Y+6	; 0x06
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	71 f1       	breq	.+92     	; 0x1586 <DIO_u8SetPinValue+0x1b0>
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	e9 f1       	breq	.+122    	; 0x15ae <DIO_u8SetPinValue+0x1d8>
    1534:	50 c0       	rjmp	.+160    	; 0x15d6 <DIO_u8SetPinValue+0x200>
		   case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    1536:	ab e3       	ldi	r26, 0x3B	; 59
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e3       	ldi	r30, 0x3B	; 59
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_u8SetPinValue+0x17e>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_u8SetPinValue+0x17a>
    1558:	84 2b       	or	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	44 c0       	rjmp	.+136    	; 0x15e6 <DIO_u8SetPinValue+0x210>
           case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
    155e:	a8 e3       	ldi	r26, 0x38	; 56
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e3       	ldi	r30, 0x38	; 56
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_u8SetPinValue+0x1a6>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_u8SetPinValue+0x1a2>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	30 c0       	rjmp	.+96     	; 0x15e6 <DIO_u8SetPinValue+0x210>
           case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    1586:	a5 e3       	ldi	r26, 0x35	; 53
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e3       	ldi	r30, 0x35	; 53
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_u8SetPinValue+0x1ce>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_u8SetPinValue+0x1ca>
    15a8:	84 2b       	or	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	1c c0       	rjmp	.+56     	; 0x15e6 <DIO_u8SetPinValue+0x210>
           case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    15ae:	a2 e3       	ldi	r26, 0x32	; 50
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e2 e3       	ldi	r30, 0x32	; 50
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_u8SetPinValue+0x1f6>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_u8SetPinValue+0x1f2>
    15d0:	84 2b       	or	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	08 c0       	rjmp	.+16     	; 0x15e6 <DIO_u8SetPinValue+0x210>
           default: Local_u8ErrorState = NOOK;          break;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <DIO_u8SetPinValue+0x210>
			}
		}
		else {
			Local_u8ErrorState = NOOK;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_u8SetPinValue+0x210>
		}

	}
	else {
		Local_u8ErrorState = NOOK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01





	return Local_u8ErrorState;
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e8:	28 96       	adiw	r28, 0x08	; 8
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value) {
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <DIO_u8SetPortValue+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <DIO_u8SetPortValue+0x8>
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	8a 83       	std	Y+2, r24	; 0x02
    160a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    160c:	19 82       	std	Y+1, r1	; 0x01

	 switch(Copy_u8Port) {
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3d 83       	std	Y+5, r19	; 0x05
    1616:	2c 83       	std	Y+4, r18	; 0x04
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	d1 f0       	breq	.+52     	; 0x1656 <DIO_u8SetPortValue+0x5c>
    1622:	2c 81       	ldd	r18, Y+4	; 0x04
    1624:	3d 81       	ldd	r19, Y+5	; 0x05
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <DIO_u8SetPortValue+0x3c>
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 f0       	breq	.+24     	; 0x164c <DIO_u8SetPortValue+0x52>
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <DIO_u8SetPortValue+0x7a>
    1636:	2c 81       	ldd	r18, Y+4	; 0x04
    1638:	3d 81       	ldd	r19, Y+5	; 0x05
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	81 f0       	breq	.+32     	; 0x1660 <DIO_u8SetPortValue+0x66>
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	81 f0       	breq	.+32     	; 0x166a <DIO_u8SetPortValue+0x70>
    164a:	14 c0       	rjmp	.+40     	; 0x1674 <DIO_u8SetPortValue+0x7a>

	 case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    164c:	eb e3       	ldi	r30, 0x3B	; 59
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	80 83       	st	Z, r24
    1654:	11 c0       	rjmp	.+34     	; 0x1678 <DIO_u8SetPortValue+0x7e>
	 case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1656:	e8 e3       	ldi	r30, 0x38	; 56
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	80 83       	st	Z, r24
    165e:	0c c0       	rjmp	.+24     	; 0x1678 <DIO_u8SetPortValue+0x7e>
	 case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1660:	e5 e3       	ldi	r30, 0x35	; 53
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	80 83       	st	Z, r24
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <DIO_u8SetPortValue+0x7e>
	 case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	80 83       	st	Z, r24
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8SetPortValue+0x7e>
	 default: Local_u8ErrorState = NOOK;        break;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01





	return Local_u8ErrorState;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value) {
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	27 97       	sbiw	r28, 0x07	; 7
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	8a 83       	std	Y+2, r24	; 0x02
    16a0:	6b 83       	std	Y+3, r22	; 0x03
    16a2:	5d 83       	std	Y+5, r21	; 0x05
    16a4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    16a6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7 && Copy_pu8Value != NULL) {
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <DIO_u8GetPinValue+0x26>
    16ae:	aa c0       	rjmp	.+340    	; 0x1804 <DIO_u8GetPinValue+0x17a>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	09 f4       	brne	.+2      	; 0x16ba <DIO_u8GetPinValue+0x30>
    16b8:	a5 c0       	rjmp	.+330    	; 0x1804 <DIO_u8GetPinValue+0x17a>

		switch(Copy_u8Port) {
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3f 83       	std	Y+7, r19	; 0x07
    16c2:	2e 83       	std	Y+6, r18	; 0x06
    16c4:	4e 81       	ldd	r20, Y+6	; 0x06
    16c6:	5f 81       	ldd	r21, Y+7	; 0x07
    16c8:	41 30       	cpi	r20, 0x01	; 1
    16ca:	51 05       	cpc	r21, r1
    16cc:	c1 f1       	breq	.+112    	; 0x173e <DIO_u8GetPinValue+0xb4>
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	91 05       	cpc	r25, r1
    16d6:	34 f4       	brge	.+12     	; 0x16e4 <DIO_u8GetPinValue+0x5a>
    16d8:	2e 81       	ldd	r18, Y+6	; 0x06
    16da:	3f 81       	ldd	r19, Y+7	; 0x07
    16dc:	21 15       	cp	r18, r1
    16de:	31 05       	cpc	r19, r1
    16e0:	71 f0       	breq	.+28     	; 0x16fe <DIO_u8GetPinValue+0x74>
    16e2:	8d c0       	rjmp	.+282    	; 0x17fe <DIO_u8GetPinValue+0x174>
    16e4:	4e 81       	ldd	r20, Y+6	; 0x06
    16e6:	5f 81       	ldd	r21, Y+7	; 0x07
    16e8:	42 30       	cpi	r20, 0x02	; 2
    16ea:	51 05       	cpc	r21, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <DIO_u8GetPinValue+0x66>
    16ee:	47 c0       	rjmp	.+142    	; 0x177e <DIO_u8GetPinValue+0xf4>
    16f0:	8e 81       	ldd	r24, Y+6	; 0x06
    16f2:	9f 81       	ldd	r25, Y+7	; 0x07
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <DIO_u8GetPinValue+0x72>
    16fa:	61 c0       	rjmp	.+194    	; 0x17be <DIO_u8GetPinValue+0x134>
    16fc:	80 c0       	rjmp	.+256    	; 0x17fe <DIO_u8GetPinValue+0x174>
      	 case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    16fe:	e9 e3       	ldi	r30, 0x39	; 57
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_u8GetPinValue+0x8e>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	2a 95       	dec	r18
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_u8GetPinValue+0x8a>
    171c:	9a 01       	movw	r18, r20
    171e:	28 23       	and	r18, r24
    1720:	39 23       	and	r19, r25
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a9 01       	movw	r20, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_u8GetPinValue+0xa6>
    172c:	55 95       	asr	r21
    172e:	47 95       	ror	r20
    1730:	8a 95       	dec	r24
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_u8GetPinValue+0xa2>
    1734:	ca 01       	movw	r24, r20
    1736:	ec 81       	ldd	r30, Y+4	; 0x04
    1738:	fd 81       	ldd	r31, Y+5	; 0x05
    173a:	80 83       	st	Z, r24
    173c:	65 c0       	rjmp	.+202    	; 0x1808 <DIO_u8GetPinValue+0x17e>
      	 case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    173e:	e6 e3       	ldi	r30, 0x36	; 54
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_u8GetPinValue+0xce>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	2a 95       	dec	r18
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_u8GetPinValue+0xca>
    175c:	9a 01       	movw	r18, r20
    175e:	28 23       	and	r18, r24
    1760:	39 23       	and	r19, r25
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8GetPinValue+0xe6>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8GetPinValue+0xe2>
    1774:	ca 01       	movw	r24, r20
    1776:	ec 81       	ldd	r30, Y+4	; 0x04
    1778:	fd 81       	ldd	r31, Y+5	; 0x05
    177a:	80 83       	st	Z, r24
    177c:	45 c0       	rjmp	.+138    	; 0x1808 <DIO_u8GetPinValue+0x17e>
      	 case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    177e:	e3 e3       	ldi	r30, 0x33	; 51
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_u8GetPinValue+0x10e>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	2a 95       	dec	r18
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_u8GetPinValue+0x10a>
    179c:	9a 01       	movw	r18, r20
    179e:	28 23       	and	r18, r24
    17a0:	39 23       	and	r19, r25
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_u8GetPinValue+0x126>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_u8GetPinValue+0x122>
    17b4:	ca 01       	movw	r24, r20
    17b6:	ec 81       	ldd	r30, Y+4	; 0x04
    17b8:	fd 81       	ldd	r31, Y+5	; 0x05
    17ba:	80 83       	st	Z, r24
    17bc:	25 c0       	rjmp	.+74     	; 0x1808 <DIO_u8GetPinValue+0x17e>
      	 case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    17be:	e0 e3       	ldi	r30, 0x30	; 48
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_u8GetPinValue+0x14e>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	2a 95       	dec	r18
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_u8GetPinValue+0x14a>
    17dc:	9a 01       	movw	r18, r20
    17de:	28 23       	and	r18, r24
    17e0:	39 23       	and	r19, r25
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a9 01       	movw	r20, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_u8GetPinValue+0x166>
    17ec:	55 95       	asr	r21
    17ee:	47 95       	ror	r20
    17f0:	8a 95       	dec	r24
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_u8GetPinValue+0x162>
    17f4:	ca 01       	movw	r24, r20
    17f6:	ec 81       	ldd	r30, Y+4	; 0x04
    17f8:	fd 81       	ldd	r31, Y+5	; 0x05
    17fa:	80 83       	st	Z, r24
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <DIO_u8GetPinValue+0x17e>
      	 default: Local_u8ErrorState = NOOK;                           break;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8GetPinValue+0x17e>

		}
	} else {
		Local_u8ErrorState = NOOK;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrorState;
    1808:	89 81       	ldd	r24, Y+1	; 0x01
}
    180a:	27 96       	adiw	r28, 0x07	; 7
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <Keypad_u8DebounceButton>:

#include "Keypad_config.h"
#include "Keypad_private.h"
#include "Keypad_interface.h"

u8 Keypad_u8DebounceButton(u8 Copy_u8Port, u8 Copy_u8Pin) {
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	62 97       	sbiw	r28, 0x12	; 18
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	89 8b       	std	Y+17, r24	; 0x11
    1832:	6a 8b       	std	Y+18, r22	; 0x12
	while (1) {
		u8 Local_Flag;
		u8 Local_Stopper;
		DIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin, &Local_Flag);
    1834:	9e 01       	movw	r18, r28
    1836:	20 5f       	subi	r18, 0xF0	; 240
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	89 89       	ldd	r24, Y+17	; 0x11
    183c:	6a 89       	ldd	r22, Y+18	; 0x12
    183e:	a9 01       	movw	r20, r18
    1840:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_u8GetPinValue>
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <Keypad_u8DebounceButton+0x44>
		while (Local_Flag == 0) {
			DIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin, &Local_Flag);
    1846:	9e 01       	movw	r18, r28
    1848:	20 5f       	subi	r18, 0xF0	; 240
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
    184c:	89 89       	ldd	r24, Y+17	; 0x11
    184e:	6a 89       	ldd	r22, Y+18	; 0x12
    1850:	a9 01       	movw	r20, r18
    1852:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_u8GetPinValue>
			if (Local_Flag == 1)
    1856:	88 89       	ldd	r24, Y+16	; 0x10
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	11 f4       	brne	.+4      	; 0x1860 <Keypad_u8DebounceButton+0x44>
				Local_Stopper = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	8f 87       	std	Y+15, r24	; 0x0f
u8 Keypad_u8DebounceButton(u8 Copy_u8Port, u8 Copy_u8Pin) {
	while (1) {
		u8 Local_Flag;
		u8 Local_Stopper;
		DIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin, &Local_Flag);
		while (Local_Flag == 0) {
    1860:	88 89       	ldd	r24, Y+16	; 0x10
    1862:	88 23       	and	r24, r24
    1864:	81 f3       	breq	.-32     	; 0x1846 <Keypad_u8DebounceButton+0x2a>
			if (Local_Flag == 1)
				Local_Stopper = 1;

		}

		if (Local_Flag && Local_Stopper) {
    1866:	88 89       	ldd	r24, Y+16	; 0x10
    1868:	88 23       	and	r24, r24
    186a:	21 f3       	breq	.-56     	; 0x1834 <Keypad_u8DebounceButton+0x18>
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	88 23       	and	r24, r24
    1870:	09 f3       	breq	.-62     	; 0x1834 <Keypad_u8DebounceButton+0x18>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 ef       	ldi	r26, 0xF0	; 240
    1878:	b1 e4       	ldi	r27, 0x41	; 65
    187a:	8b 87       	std	Y+11, r24	; 0x0b
    187c:	9c 87       	std	Y+12, r25	; 0x0c
    187e:	ad 87       	std	Y+13, r26	; 0x0d
    1880:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e4       	ldi	r19, 0x40	; 64
    188e:	4c e1       	ldi	r20, 0x1C	; 28
    1890:	55 e4       	ldi	r21, 0x45	; 69
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	8f 83       	std	Y+7, r24	; 0x07
    189c:	98 87       	std	Y+8, r25	; 0x08
    189e:	a9 87       	std	Y+9, r26	; 0x09
    18a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a2:	6f 81       	ldd	r22, Y+7	; 0x07
    18a4:	78 85       	ldd	r23, Y+8	; 0x08
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <Keypad_u8DebounceButton+0xa8>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <Keypad_u8DebounceButton+0x126>
	else if (__tmp > 65535)
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <Keypad_u8DebounceButton+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18de:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <Keypad_u8DebounceButton+0x108>
    1906:	8a ef       	ldi	r24, 0xFA	; 250
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9c 83       	std	Y+4, r25	; 0x04
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <Keypad_u8DebounceButton+0xf6>
    1916:	9c 83       	std	Y+4, r25	; 0x04
    1918:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f7       	brne	.-38     	; 0x1906 <Keypad_u8DebounceButton+0xea>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <Keypad_u8DebounceButton+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	6f 81       	ldd	r22, Y+7	; 0x07
    1930:	78 85       	ldd	r23, Y+8	; 0x08
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	9a 85       	ldd	r25, Y+10	; 0x0a
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9e 83       	std	Y+6, r25	; 0x06
    1940:	8d 83       	std	Y+5, r24	; 0x05
    1942:	8d 81       	ldd	r24, Y+5	; 0x05
    1944:	9e 81       	ldd	r25, Y+6	; 0x06
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <Keypad_u8DebounceButton+0x132>
    1952:	9a 83       	std	Y+2, r25	; 0x02
    1954:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			DIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin, &Local_Flag);
    1956:	9e 01       	movw	r18, r28
    1958:	20 5f       	subi	r18, 0xF0	; 240
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	89 89       	ldd	r24, Y+17	; 0x11
    195e:	6a 89       	ldd	r22, Y+18	; 0x12
    1960:	a9 01       	movw	r20, r18
    1962:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_u8GetPinValue>
			if (Local_Flag == 1)
    1966:	88 89       	ldd	r24, Y+16	; 0x10
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	09 f0       	breq	.+2      	; 0x196e <Keypad_u8DebounceButton+0x152>
    196c:	63 cf       	rjmp	.-314    	; 0x1834 <Keypad_u8DebounceButton+0x18>
				return 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1

		}

	}

}
    1970:	62 96       	adiw	r28, 0x12	; 18
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <Keypad_u8GetPressedKey>:

u8 Keypad_u8GetPressedKey(void) {
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	a2 97       	sbiw	r28, 0x22	; 34
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PressedKey =
			NO_PRESSED_KEY, Local_u8PinState;
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8_KeypadArr[ROW_NUMBER][COLUMN_NUMBER] = KEYPAD_BUTTONS_VALUES;
    199a:	ce 01       	movw	r24, r28
    199c:	05 96       	adiw	r24, 0x05	; 5
    199e:	9f 8f       	std	Y+31, r25	; 0x1f
    19a0:	8e 8f       	std	Y+30, r24	; 0x1e
    19a2:	e1 e7       	ldi	r30, 0x71	; 113
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	f9 a3       	std	Y+33, r31	; 0x21
    19a8:	e8 a3       	std	Y+32, r30	; 0x20
    19aa:	f0 e1       	ldi	r31, 0x10	; 16
    19ac:	fa a3       	std	Y+34, r31	; 0x22
    19ae:	e8 a1       	ldd	r30, Y+32	; 0x20
    19b0:	f9 a1       	ldd	r31, Y+33	; 0x21
    19b2:	00 80       	ld	r0, Z
    19b4:	88 a1       	ldd	r24, Y+32	; 0x20
    19b6:	99 a1       	ldd	r25, Y+33	; 0x21
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	99 a3       	std	Y+33, r25	; 0x21
    19bc:	88 a3       	std	Y+32, r24	; 0x20
    19be:	ee 8d       	ldd	r30, Y+30	; 0x1e
    19c0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    19c2:	00 82       	st	Z, r0
    19c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	9f 8f       	std	Y+31, r25	; 0x1f
    19cc:	8e 8f       	std	Y+30, r24	; 0x1e
    19ce:	9a a1       	ldd	r25, Y+34	; 0x22
    19d0:	91 50       	subi	r25, 0x01	; 1
    19d2:	9a a3       	std	Y+34, r25	; 0x22
    19d4:	ea a1       	ldd	r30, Y+34	; 0x22
    19d6:	ee 23       	and	r30, r30
    19d8:	51 f7       	brne	.-44     	; 0x19ae <Keypad_u8GetPressedKey+0x2c>
	u8 Local_u8ColumnArr[COLUMN_NUMBER] = { COLUMN_PIN0, COLUMN_PIN1,
			COLUMN_PIN2, COLUMN_PIN3 };
    19da:	1d 8a       	std	Y+21, r1	; 0x15
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	8e 8b       	std	Y+22, r24	; 0x16
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	8f 8b       	std	Y+23, r24	; 0x17
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_u8RowArr[ROW_NUMBER] = { ROW_PIN0, ROW_PIN1, ROW_PIN2, ROW_PIN3 };
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	89 8f       	std	Y+25, r24	; 0x19
    19ec:	85 e0       	ldi	r24, 0x05	; 5
    19ee:	8a 8f       	std	Y+26, r24	; 0x1a
    19f0:	86 e0       	ldi	r24, 0x06	; 6
    19f2:	8b 8f       	std	Y+27, r24	; 0x1b
    19f4:	87 e0       	ldi	r24, 0x07	; 7
    19f6:	8c 8f       	std	Y+28, r24	; 0x1c

	for (Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUMBER;
    19f8:	1b 82       	std	Y+3, r1	; 0x03
    19fa:	62 c0       	rjmp	.+196    	; 0x1ac0 <Keypad_u8GetPressedKey+0x13e>
			Local_u8ColumnIndex++) {

		//Activate the current column;
		DIO_u8SetPinValue(KEYPAD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex],
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	ce 01       	movw	r24, r28
    1a04:	45 96       	adiw	r24, 0x15	; 21
    1a06:	fc 01       	movw	r30, r24
    1a08:	e2 0f       	add	r30, r18
    1a0a:	f3 1f       	adc	r31, r19
    1a0c:	90 81       	ld	r25, Z
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	69 2f       	mov	r22, r25
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>
				DIO_u8PIN_LOW);

		for (Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER;
    1a18:	1a 82       	std	Y+2, r1	; 0x02
    1a1a:	3d c0       	rjmp	.+122    	; 0x1a96 <Keypad_u8GetPressedKey+0x114>
				Local_u8RowIndex++) {

			//Read the current row;
			DIO_u8GetPinValue(KEYPAD_PORT, Local_u8RowArr[Local_u8RowIndex],
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	ce 01       	movw	r24, r28
    1a24:	49 96       	adiw	r24, 0x19	; 25
    1a26:	fc 01       	movw	r30, r24
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f3 1f       	adc	r31, r19
    1a2c:	90 81       	ld	r25, Z
    1a2e:	9e 01       	movw	r18, r28
    1a30:	2c 5f       	subi	r18, 0xFC	; 252
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	69 2f       	mov	r22, r25
    1a38:	a9 01       	movw	r20, r18
    1a3a:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_u8GetPinValue>
					&Local_u8PinState);

			if (Local_u8PinState == DIO_u8PIN_LOW) {
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	88 23       	and	r24, r24
    1a42:	31 f5       	brne	.+76     	; 0x1a90 <Keypad_u8GetPressedKey+0x10e>
				 if (Keypad_u8DebounceButton(KEYPAD_PORT, Local_u8RowArr[Local_u8RowIndex])) {
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	49 96       	adiw	r24, 0x19	; 25
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	90 81       	ld	r25, Z
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	69 2f       	mov	r22, r25
    1a5a:	0e 94 0e 0c 	call	0x181c	; 0x181c <Keypad_u8DebounceButton>
    1a5e:	88 23       	and	r24, r24
    1a60:	b9 f0       	breq	.+46     	; 0x1a90 <Keypad_u8GetPressedKey+0x10e>

					Local_u8PressedKey = Local_u8_KeypadArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	22 0f       	add	r18, r18
    1a70:	33 1f       	adc	r19, r19
    1a72:	22 0f       	add	r18, r18
    1a74:	33 1f       	adc	r19, r19
    1a76:	ce 01       	movw	r24, r28
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	84 0f       	add	r24, r20
    1a80:	95 1f       	adc	r25, r21
    1a82:	fc 01       	movw	r30, r24
    1a84:	34 96       	adiw	r30, 0x04	; 4
    1a86:	80 81       	ld	r24, Z
    1a88:	89 83       	std	Y+1, r24	; 0x01
					return Local_u8PressedKey;
    1a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a8c:	fd 8f       	std	Y+29, r31	; 0x1d
    1a8e:	1e c0       	rjmp	.+60     	; 0x1acc <Keypad_u8GetPressedKey+0x14a>
		//Activate the current column;
		DIO_u8SetPinValue(KEYPAD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex],
				DIO_u8PIN_LOW);

		for (Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER;
				Local_u8RowIndex++) {
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	8a 83       	std	Y+2, r24	; 0x02

		//Activate the current column;
		DIO_u8SetPinValue(KEYPAD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex],
				DIO_u8PIN_LOW);

		for (Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER;
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <Keypad_u8GetPressedKey+0x11c>
    1a9c:	bf cf       	rjmp	.-130    	; 0x1a1c <Keypad_u8GetPressedKey+0x9a>

			}

		}
		//Deactivate the current column;
		DIO_u8SetPinValue(KEYPAD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex],
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	45 96       	adiw	r24, 0x15	; 21
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	e2 0f       	add	r30, r18
    1aac:	f3 1f       	adc	r31, r19
    1aae:	90 81       	ld	r25, Z
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	69 2f       	mov	r22, r25
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8SetPinValue>
	u8 Local_u8ColumnArr[COLUMN_NUMBER] = { COLUMN_PIN0, COLUMN_PIN1,
			COLUMN_PIN2, COLUMN_PIN3 };
	u8 Local_u8RowArr[ROW_NUMBER] = { ROW_PIN0, ROW_PIN1, ROW_PIN2, ROW_PIN3 };

	for (Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUMBER;
			Local_u8ColumnIndex++) {
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_KeypadArr[ROW_NUMBER][COLUMN_NUMBER] = KEYPAD_BUTTONS_VALUES;
	u8 Local_u8ColumnArr[COLUMN_NUMBER] = { COLUMN_PIN0, COLUMN_PIN1,
			COLUMN_PIN2, COLUMN_PIN3 };
	u8 Local_u8RowArr[ROW_NUMBER] = { ROW_PIN0, ROW_PIN1, ROW_PIN2, ROW_PIN3 };

	for (Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUMBER;
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <Keypad_u8GetPressedKey+0x146>
    1ac6:	9a cf       	rjmp	.-204    	; 0x19fc <Keypad_u8GetPressedKey+0x7a>
		//Deactivate the current column;
		DIO_u8SetPinValue(KEYPAD_PORT, Local_u8ColumnArr[Local_u8ColumnIndex],
				DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	8d 8f       	std	Y+29, r24	; 0x1d
    1acc:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1ace:	a2 96       	adiw	r28, 0x22	; 34
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <PORT_voidInit>:
#include "PORT_private.h"
#include "Port_register.h"
#include "Port_interface.h"


void PORT_voidInit(void) {
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1ae8:	ea e3       	ldi	r30, 0x3A	; 58
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	8f ef       	ldi	r24, 0xFF	; 255
    1aee:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1af0:	e7 e3       	ldi	r30, 0x37	; 55
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    1af6:	e4 e3       	ldi	r30, 0x34	; 52
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	87 e0       	ldi	r24, 0x07	; 7
    1afc:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1afe:	e1 e3       	ldi	r30, 0x31	; 49
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8f e0       	ldi	r24, 0x0F	; 15
    1b04:	80 83       	st	Z, r24
	
	PORTA = PORTA_INITIAL_VALUE;
    1b06:	eb e3       	ldi	r30, 0x3B	; 59
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1b12:	e5 e3       	ldi	r30, 0x35	; 53
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    1b18:	e2 e3       	ldi	r30, 0x32	; 50
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	80 83       	st	Z, r24
	
}
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <TactileButton_u8DebounceButton>:
#include "STD_TYPES.h"
#include <util/delay.h>

#include "DIO_interface.h"

u8 TactileButton_u8DebounceButton(u8 Copy_u8Port, u8 Copy_u8Pin) {
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	63 97       	sbiw	r28, 0x13	; 19
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	8a 8b       	std	Y+18, r24	; 0x12
    1b3c:	6b 8b       	std	Y+19, r22	; 0x13
	while (1) {
		u8 * Local_Flag = malloc(sizeof(u8));
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <malloc>
    1b46:	99 8b       	std	Y+17, r25	; 0x11
    1b48:	88 8b       	std	Y+16, r24	; 0x10
		u8 Local_Stopper;
		DIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin, Local_Flag);
    1b4a:	28 89       	ldd	r18, Y+16	; 0x10
    1b4c:	39 89       	ldd	r19, Y+17	; 0x11
    1b4e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b50:	6b 89       	ldd	r22, Y+19	; 0x13
    1b52:	a9 01       	movw	r20, r18
    1b54:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_u8GetPinValue>
    1b58:	0e c0       	rjmp	.+28     	; 0x1b76 <TactileButton_u8DebounceButton+0x50>
		while (*Local_Flag == 0) {
			DIO_u8GetPinValue(DIO_u8PORTD, DIO_u8PIN0, Local_Flag);
    1b5a:	28 89       	ldd	r18, Y+16	; 0x10
    1b5c:	39 89       	ldd	r19, Y+17	; 0x11
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	a9 01       	movw	r20, r18
    1b64:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_u8GetPinValue>
			if (*Local_Flag == 1) {
    1b68:	e8 89       	ldd	r30, Y+16	; 0x10
    1b6a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <TactileButton_u8DebounceButton+0x50>
				Local_Stopper = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	8f 87       	std	Y+15, r24	; 0x0f
u8 TactileButton_u8DebounceButton(u8 Copy_u8Port, u8 Copy_u8Pin) {
	while (1) {
		u8 * Local_Flag = malloc(sizeof(u8));
		u8 Local_Stopper;
		DIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin, Local_Flag);
		while (*Local_Flag == 0) {
    1b76:	e8 89       	ldd	r30, Y+16	; 0x10
    1b78:	f9 89       	ldd	r31, Y+17	; 0x11
    1b7a:	80 81       	ld	r24, Z
    1b7c:	88 23       	and	r24, r24
    1b7e:	69 f3       	breq	.-38     	; 0x1b5a <TactileButton_u8DebounceButton+0x34>
				Local_Stopper = 1;
			}

		}

		if (*Local_Flag && Local_Stopper) {
    1b80:	e8 89       	ldd	r30, Y+16	; 0x10
    1b82:	f9 89       	ldd	r31, Y+17	; 0x11
    1b84:	80 81       	ld	r24, Z
    1b86:	88 23       	and	r24, r24
    1b88:	d1 f2       	breq	.-76     	; 0x1b3e <TactileButton_u8DebounceButton+0x18>
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	88 23       	and	r24, r24
    1b8e:	b9 f2       	breq	.-82     	; 0x1b3e <TactileButton_u8DebounceButton+0x18>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 ef       	ldi	r26, 0xF0	; 240
    1b96:	b1 e4       	ldi	r27, 0x41	; 65
    1b98:	8b 87       	std	Y+11, r24	; 0x0b
    1b9a:	9c 87       	std	Y+12, r25	; 0x0c
    1b9c:	ad 87       	std	Y+13, r26	; 0x0d
    1b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e4       	ldi	r19, 0x40	; 64
    1bac:	4c e1       	ldi	r20, 0x1C	; 28
    1bae:	55 e4       	ldi	r21, 0x45	; 69
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8f 83       	std	Y+7, r24	; 0x07
    1bba:	98 87       	std	Y+8, r25	; 0x08
    1bbc:	a9 87       	std	Y+9, r26	; 0x09
    1bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <TactileButton_u8DebounceButton+0xbc>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <TactileButton_u8DebounceButton+0x13a>
	else if (__tmp > 65535)
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <TactileButton_u8DebounceButton+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <TactileButton_u8DebounceButton+0x11c>
    1c24:	8a ef       	ldi	r24, 0xFA	; 250
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <TactileButton_u8DebounceButton+0x10a>
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <TactileButton_u8DebounceButton+0xfe>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <TactileButton_u8DebounceButton+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <TactileButton_u8DebounceButton+0x146>
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			DIO_u8GetPinValue(DIO_u8PORTD, DIO_u8PIN0, Local_Flag);
    1c74:	28 89       	ldd	r18, Y+16	; 0x10
    1c76:	39 89       	ldd	r19, Y+17	; 0x11
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	a9 01       	movw	r20, r18
    1c7e:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_u8GetPinValue>
			if (*Local_Flag == 1) {
    1c82:	e8 89       	ldd	r30, Y+16	; 0x10
    1c84:	f9 89       	ldd	r31, Y+17	; 0x11
    1c86:	80 81       	ld	r24, Z
    1c88:	81 30       	cpi	r24, 0x01	; 1
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <TactileButton_u8DebounceButton+0x168>
    1c8c:	58 cf       	rjmp	.-336    	; 0x1b3e <TactileButton_u8DebounceButton+0x18>
				return 1;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

	}

}
    1c90:	63 96       	adiw	r28, 0x13	; 19
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <main>:
#include "PORT_interface.h"

#include "CLCD_interface.h"
#include "Keypad_interface.h"

void main(void) {
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	65 97       	sbiw	r28, 0x15	; 21
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61

	PORT_voidInit();
    1cb6:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <PORT_voidInit>

	CLCD_voidInit();
    1cba:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	CLCD_voidSendCommand(CLCD_TURN_CURSOR_ON);
    1cbe:	8e e0       	ldi	r24, 0x0E	; 14
    1cc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	u8 Operand1, Operand2, Operator, result;
	u8 Value_Pressed = 0;
    1cc4:	1f 86       	std	Y+15, r1	; 0x0f
	while (1) {

		Value_Pressed = Keypad_u8GetPressedKey();
    1cc6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <Keypad_u8GetPressedKey>
    1cca:	8f 87       	std	Y+15, r24	; 0x0f
		if (Value_Pressed != 0xff) {
    1ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cce:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd0:	d1 f3       	breq	.-12     	; 0x1cc6 <main+0x24>
			switch (Value_Pressed) {
    1cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	3d 8b       	std	Y+21, r19	; 0x15
    1cda:	2c 8b       	std	Y+20, r18	; 0x14
    1cdc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cde:	9d 89       	ldd	r25, Y+21	; 0x15
    1ce0:	87 30       	cpi	r24, 0x07	; 7
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <main+0x46>
    1ce6:	fd c0       	rjmp	.+506    	; 0x1ee2 <main+0x240>
    1ce8:	2c 89       	ldd	r18, Y+20	; 0x14
    1cea:	3d 89       	ldd	r19, Y+21	; 0x15
    1cec:	28 30       	cpi	r18, 0x08	; 8
    1cee:	31 05       	cpc	r19, r1
    1cf0:	54 f5       	brge	.+84     	; 0x1d46 <main+0xa4>
    1cf2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf4:	9d 89       	ldd	r25, Y+21	; 0x15
    1cf6:	83 30       	cpi	r24, 0x03	; 3
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <main+0x5c>
    1cfc:	e2 c0       	rjmp	.+452    	; 0x1ec2 <main+0x220>
    1cfe:	2c 89       	ldd	r18, Y+20	; 0x14
    1d00:	3d 89       	ldd	r19, Y+21	; 0x15
    1d02:	24 30       	cpi	r18, 0x04	; 4
    1d04:	31 05       	cpc	r19, r1
    1d06:	94 f4       	brge	.+36     	; 0x1d2c <main+0x8a>
    1d08:	8c 89       	ldd	r24, Y+20	; 0x14
    1d0a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <main+0x72>
    1d12:	cf c0       	rjmp	.+414    	; 0x1eb2 <main+0x210>
    1d14:	2c 89       	ldd	r18, Y+20	; 0x14
    1d16:	3d 89       	ldd	r19, Y+21	; 0x15
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <main+0x7e>
    1d1e:	cd c0       	rjmp	.+410    	; 0x1eba <main+0x218>
    1d20:	8c 89       	ldd	r24, Y+20	; 0x14
    1d22:	9d 89       	ldd	r25, Y+21	; 0x15
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <main+0x88>
    1d28:	4b c0       	rjmp	.+150    	; 0x1dc0 <main+0x11e>
    1d2a:	cd cf       	rjmp	.-102    	; 0x1cc6 <main+0x24>
    1d2c:	2c 89       	ldd	r18, Y+20	; 0x14
    1d2e:	3d 89       	ldd	r19, Y+21	; 0x15
    1d30:	25 30       	cpi	r18, 0x05	; 5
    1d32:	31 05       	cpc	r19, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <main+0x96>
    1d36:	cd c0       	rjmp	.+410    	; 0x1ed2 <main+0x230>
    1d38:	8c 89       	ldd	r24, Y+20	; 0x14
    1d3a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d3c:	86 30       	cpi	r24, 0x06	; 6
    1d3e:	91 05       	cpc	r25, r1
    1d40:	0c f0       	brlt	.+2      	; 0x1d44 <main+0xa2>
    1d42:	cb c0       	rjmp	.+406    	; 0x1eda <main+0x238>
    1d44:	c2 c0       	rjmp	.+388    	; 0x1eca <main+0x228>
    1d46:	2c 89       	ldd	r18, Y+20	; 0x14
    1d48:	3d 89       	ldd	r19, Y+21	; 0x15
    1d4a:	22 33       	cpi	r18, 0x32	; 50
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <main+0xb0>
    1d50:	d8 c0       	rjmp	.+432    	; 0x1f02 <main+0x260>
    1d52:	8c 89       	ldd	r24, Y+20	; 0x14
    1d54:	9d 89       	ldd	r25, Y+21	; 0x15
    1d56:	83 33       	cpi	r24, 0x33	; 51
    1d58:	91 05       	cpc	r25, r1
    1d5a:	9c f4       	brge	.+38     	; 0x1d82 <main+0xe0>
    1d5c:	2c 89       	ldd	r18, Y+20	; 0x14
    1d5e:	3d 89       	ldd	r19, Y+21	; 0x15
    1d60:	29 30       	cpi	r18, 0x09	; 9
    1d62:	31 05       	cpc	r19, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <main+0xc6>
    1d66:	c5 c0       	rjmp	.+394    	; 0x1ef2 <main+0x250>
    1d68:	8c 89       	ldd	r24, Y+20	; 0x14
    1d6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d6c:	89 30       	cpi	r24, 0x09	; 9
    1d6e:	91 05       	cpc	r25, r1
    1d70:	0c f4       	brge	.+2      	; 0x1d74 <main+0xd2>
    1d72:	bb c0       	rjmp	.+374    	; 0x1eea <main+0x248>
    1d74:	2c 89       	ldd	r18, Y+20	; 0x14
    1d76:	3d 89       	ldd	r19, Y+21	; 0x15
    1d78:	28 32       	cpi	r18, 0x28	; 40
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <main+0xde>
    1d7e:	bd c0       	rjmp	.+378    	; 0x1efa <main+0x258>
    1d80:	a2 cf       	rjmp	.-188    	; 0x1cc6 <main+0x24>
    1d82:	8c 89       	ldd	r24, Y+20	; 0x14
    1d84:	9d 89       	ldd	r25, Y+21	; 0x15
    1d86:	86 34       	cpi	r24, 0x46	; 70
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <main+0xec>
    1d8c:	c2 c0       	rjmp	.+388    	; 0x1f12 <main+0x270>
    1d8e:	2c 89       	ldd	r18, Y+20	; 0x14
    1d90:	3d 89       	ldd	r19, Y+21	; 0x15
    1d92:	27 34       	cpi	r18, 0x47	; 71
    1d94:	31 05       	cpc	r19, r1
    1d96:	3c f4       	brge	.+14     	; 0x1da6 <main+0x104>
    1d98:	8c 89       	ldd	r24, Y+20	; 0x14
    1d9a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d9c:	8c 33       	cpi	r24, 0x3C	; 60
    1d9e:	91 05       	cpc	r25, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <main+0x102>
    1da2:	b3 c0       	rjmp	.+358    	; 0x1f0a <main+0x268>
    1da4:	90 cf       	rjmp	.-224    	; 0x1cc6 <main+0x24>
    1da6:	2c 89       	ldd	r18, Y+20	; 0x14
    1da8:	3d 89       	ldd	r19, Y+21	; 0x15
    1daa:	2a 35       	cpi	r18, 0x5A	; 90
    1dac:	31 05       	cpc	r19, r1
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <main+0x110>
    1db0:	b8 c0       	rjmp	.+368    	; 0x1f22 <main+0x280>
    1db2:	8c 89       	ldd	r24, Y+20	; 0x14
    1db4:	9d 89       	ldd	r25, Y+21	; 0x15
    1db6:	84 36       	cpi	r24, 0x64	; 100
    1db8:	91 05       	cpc	r25, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <main+0x11c>
    1dbc:	ae c0       	rjmp	.+348    	; 0x1f1a <main+0x278>
    1dbe:	83 cf       	rjmp	.-250    	; 0x1cc6 <main+0x24>
			case 0:
				CLCD_voidSendData('0');
    1dc0:	80 e3       	ldi	r24, 0x30	; 48
    1dc2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	aa ef       	ldi	r26, 0xFA	; 250
    1dcc:	b3 e4       	ldi	r27, 0x43	; 67
    1dce:	8b 87       	std	Y+11, r24	; 0x0b
    1dd0:	9c 87       	std	Y+12, r25	; 0x0c
    1dd2:	ad 87       	std	Y+13, r26	; 0x0d
    1dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e4       	ldi	r19, 0x40	; 64
    1de2:	4c e1       	ldi	r20, 0x1C	; 28
    1de4:	55 e4       	ldi	r21, 0x45	; 69
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8f 83       	std	Y+7, r24	; 0x07
    1df0:	98 87       	std	Y+8, r25	; 0x08
    1df2:	a9 87       	std	Y+9, r26	; 0x09
    1df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <main+0x176>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <main+0x1f4>
	else if (__tmp > 65535)
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e 83       	std	Y+6, r25	; 0x06
    1e56:	8d 83       	std	Y+5, r24	; 0x05
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <main+0x1d6>
    1e5a:	8a ef       	ldi	r24, 0xFA	; 250
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <main+0x1c4>
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <main+0x1b8>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <main+0x200>
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				CLCD_voidSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    1eaa:	88 e1       	ldi	r24, 0x18	; 24
    1eac:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1eb0:	0a cf       	rjmp	.-492    	; 0x1cc6 <main+0x24>
				break;
			case 1:
				CLCD_voidSendData('1');
    1eb2:	81 e3       	ldi	r24, 0x31	; 49
    1eb4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1eb8:	06 cf       	rjmp	.-500    	; 0x1cc6 <main+0x24>
				//CLCD_voidSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
				break;
			case 2:
				CLCD_voidSendData('2');
    1eba:	82 e3       	ldi	r24, 0x32	; 50
    1ebc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ec0:	02 cf       	rjmp	.-508    	; 0x1cc6 <main+0x24>
				break;
			case 3:
				CLCD_voidSendData('3');
    1ec2:	83 e3       	ldi	r24, 0x33	; 51
    1ec4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ec8:	fe ce       	rjmp	.-516    	; 0x1cc6 <main+0x24>
				break;
			case 4:
				CLCD_voidSendData('4');
    1eca:	84 e3       	ldi	r24, 0x34	; 52
    1ecc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ed0:	fa ce       	rjmp	.-524    	; 0x1cc6 <main+0x24>
				break;
			case 5:
				CLCD_voidSendData('5');
    1ed2:	85 e3       	ldi	r24, 0x35	; 53
    1ed4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ed8:	f6 ce       	rjmp	.-532    	; 0x1cc6 <main+0x24>
				break;
			case 6:
				CLCD_voidSendData('6');
    1eda:	86 e3       	ldi	r24, 0x36	; 54
    1edc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ee0:	f2 ce       	rjmp	.-540    	; 0x1cc6 <main+0x24>
				break;
			case 7:
				CLCD_voidSendData('7');
    1ee2:	87 e3       	ldi	r24, 0x37	; 55
    1ee4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ee8:	ee ce       	rjmp	.-548    	; 0x1cc6 <main+0x24>
				break;
			case 8:
				CLCD_voidSendData('8');
    1eea:	88 e3       	ldi	r24, 0x38	; 56
    1eec:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ef0:	ea ce       	rjmp	.-556    	; 0x1cc6 <main+0x24>
				break;
			case 9:
				CLCD_voidSendData('9');
    1ef2:	89 e3       	ldi	r24, 0x39	; 57
    1ef4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1ef8:	e6 ce       	rjmp	.-564    	; 0x1cc6 <main+0x24>
				break;
			case 40:
				CLCD_voidSendData('+');
    1efa:	8b e2       	ldi	r24, 0x2B	; 43
    1efc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1f00:	e2 ce       	rjmp	.-572    	; 0x1cc6 <main+0x24>
				break;
			case 50:
				CLCD_voidSendData('-');
    1f02:	8d e2       	ldi	r24, 0x2D	; 45
    1f04:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1f08:	de ce       	rjmp	.-580    	; 0x1cc6 <main+0x24>
				break;
			case 60:
				CLCD_voidSendData('*');
    1f0a:	8a e2       	ldi	r24, 0x2A	; 42
    1f0c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1f10:	da ce       	rjmp	.-588    	; 0x1cc6 <main+0x24>
				break;
			case 70:
				CLCD_voidSendData('/');
    1f12:	8f e2       	ldi	r24, 0x2F	; 47
    1f14:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1f18:	d6 ce       	rjmp	.-596    	; 0x1cc6 <main+0x24>
				break;
			case 100:
				CLCD_voidSendData('=');
    1f1a:	8d e3       	ldi	r24, 0x3D	; 61
    1f1c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1f20:	d2 ce       	rjmp	.-604    	; 0x1cc6 <main+0x24>
				break;
			case 90:
				CLCD_voidSendCommand(CLCD_CLEAR_DISPLAY);
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1f28:	ce ce       	rjmp	.-612    	; 0x1cc6 <main+0x24>

00001f2a <__udivmodsi4>:
    1f2a:	a1 e2       	ldi	r26, 0x21	; 33
    1f2c:	1a 2e       	mov	r1, r26
    1f2e:	aa 1b       	sub	r26, r26
    1f30:	bb 1b       	sub	r27, r27
    1f32:	fd 01       	movw	r30, r26
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <__udivmodsi4_ep>

00001f36 <__udivmodsi4_loop>:
    1f36:	aa 1f       	adc	r26, r26
    1f38:	bb 1f       	adc	r27, r27
    1f3a:	ee 1f       	adc	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	a2 17       	cp	r26, r18
    1f40:	b3 07       	cpc	r27, r19
    1f42:	e4 07       	cpc	r30, r20
    1f44:	f5 07       	cpc	r31, r21
    1f46:	20 f0       	brcs	.+8      	; 0x1f50 <__udivmodsi4_ep>
    1f48:	a2 1b       	sub	r26, r18
    1f4a:	b3 0b       	sbc	r27, r19
    1f4c:	e4 0b       	sbc	r30, r20
    1f4e:	f5 0b       	sbc	r31, r21

00001f50 <__udivmodsi4_ep>:
    1f50:	66 1f       	adc	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 1f       	adc	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	1a 94       	dec	r1
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <__udivmodsi4_loop>
    1f5c:	60 95       	com	r22
    1f5e:	70 95       	com	r23
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	9b 01       	movw	r18, r22
    1f66:	ac 01       	movw	r20, r24
    1f68:	bd 01       	movw	r22, r26
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	08 95       	ret

00001f6e <__prologue_saves__>:
    1f6e:	2f 92       	push	r2
    1f70:	3f 92       	push	r3
    1f72:	4f 92       	push	r4
    1f74:	5f 92       	push	r5
    1f76:	6f 92       	push	r6
    1f78:	7f 92       	push	r7
    1f7a:	8f 92       	push	r8
    1f7c:	9f 92       	push	r9
    1f7e:	af 92       	push	r10
    1f80:	bf 92       	push	r11
    1f82:	cf 92       	push	r12
    1f84:	df 92       	push	r13
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	ca 1b       	sub	r28, r26
    1f98:	db 0b       	sbc	r29, r27
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	09 94       	ijmp

00001fa6 <__epilogue_restores__>:
    1fa6:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa8:	39 88       	ldd	r3, Y+17	; 0x11
    1faa:	48 88       	ldd	r4, Y+16	; 0x10
    1fac:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fae:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb8:	b9 84       	ldd	r11, Y+9	; 0x09
    1fba:	c8 84       	ldd	r12, Y+8	; 0x08
    1fbc:	df 80       	ldd	r13, Y+7	; 0x07
    1fbe:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc0:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc2:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc4:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc6:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fca:	ce 0f       	add	r28, r30
    1fcc:	d1 1d       	adc	r29, r1
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	ed 01       	movw	r28, r26
    1fda:	08 95       	ret

00001fdc <malloc>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	10 f4       	brcc	.+4      	; 0x1fec <malloc+0x10>
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	a0 91 84 00 	lds	r26, 0x0084
    1ff0:	b0 91 85 00 	lds	r27, 0x0085
    1ff4:	ed 01       	movw	r28, r26
    1ff6:	e0 e0       	ldi	r30, 0x00	; 0
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	21 c0       	rjmp	.+66     	; 0x2042 <malloc+0x66>
    2000:	88 81       	ld	r24, Y
    2002:	99 81       	ldd	r25, Y+1	; 0x01
    2004:	86 17       	cp	r24, r22
    2006:	97 07       	cpc	r25, r23
    2008:	69 f4       	brne	.+26     	; 0x2024 <malloc+0x48>
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	30 97       	sbiw	r30, 0x00	; 0
    2010:	19 f0       	breq	.+6      	; 0x2018 <malloc+0x3c>
    2012:	93 83       	std	Z+3, r25	; 0x03
    2014:	82 83       	std	Z+2, r24	; 0x02
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <malloc+0x44>
    2018:	90 93 85 00 	sts	0x0085, r25
    201c:	80 93 84 00 	sts	0x0084, r24
    2020:	fe 01       	movw	r30, r28
    2022:	34 c0       	rjmp	.+104    	; 0x208c <malloc+0xb0>
    2024:	68 17       	cp	r22, r24
    2026:	79 07       	cpc	r23, r25
    2028:	38 f4       	brcc	.+14     	; 0x2038 <malloc+0x5c>
    202a:	41 15       	cp	r20, r1
    202c:	51 05       	cpc	r21, r1
    202e:	19 f0       	breq	.+6      	; 0x2036 <malloc+0x5a>
    2030:	84 17       	cp	r24, r20
    2032:	95 07       	cpc	r25, r21
    2034:	08 f4       	brcc	.+2      	; 0x2038 <malloc+0x5c>
    2036:	ac 01       	movw	r20, r24
    2038:	fe 01       	movw	r30, r28
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	9c 01       	movw	r18, r24
    2040:	e9 01       	movw	r28, r18
    2042:	20 97       	sbiw	r28, 0x00	; 0
    2044:	e9 f6       	brne	.-70     	; 0x2000 <malloc+0x24>
    2046:	41 15       	cp	r20, r1
    2048:	51 05       	cpc	r21, r1
    204a:	a9 f1       	breq	.+106    	; 0x20b6 <malloc+0xda>
    204c:	ca 01       	movw	r24, r20
    204e:	86 1b       	sub	r24, r22
    2050:	97 0b       	sbc	r25, r23
    2052:	04 97       	sbiw	r24, 0x04	; 4
    2054:	08 f4       	brcc	.+2      	; 0x2058 <malloc+0x7c>
    2056:	ba 01       	movw	r22, r20
    2058:	e0 e0       	ldi	r30, 0x00	; 0
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	2a c0       	rjmp	.+84     	; 0x20b2 <malloc+0xd6>
    205e:	8d 91       	ld	r24, X+
    2060:	9c 91       	ld	r25, X
    2062:	11 97       	sbiw	r26, 0x01	; 1
    2064:	84 17       	cp	r24, r20
    2066:	95 07       	cpc	r25, r21
    2068:	f9 f4       	brne	.+62     	; 0x20a8 <malloc+0xcc>
    206a:	64 17       	cp	r22, r20
    206c:	75 07       	cpc	r23, r21
    206e:	81 f4       	brne	.+32     	; 0x2090 <malloc+0xb4>
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	8d 91       	ld	r24, X+
    2074:	9c 91       	ld	r25, X
    2076:	13 97       	sbiw	r26, 0x03	; 3
    2078:	30 97       	sbiw	r30, 0x00	; 0
    207a:	19 f0       	breq	.+6      	; 0x2082 <malloc+0xa6>
    207c:	93 83       	std	Z+3, r25	; 0x03
    207e:	82 83       	std	Z+2, r24	; 0x02
    2080:	04 c0       	rjmp	.+8      	; 0x208a <malloc+0xae>
    2082:	90 93 85 00 	sts	0x0085, r25
    2086:	80 93 84 00 	sts	0x0084, r24
    208a:	fd 01       	movw	r30, r26
    208c:	32 96       	adiw	r30, 0x02	; 2
    208e:	4f c0       	rjmp	.+158    	; 0x212e <malloc+0x152>
    2090:	ca 01       	movw	r24, r20
    2092:	86 1b       	sub	r24, r22
    2094:	97 0b       	sbc	r25, r23
    2096:	fd 01       	movw	r30, r26
    2098:	e8 0f       	add	r30, r24
    209a:	f9 1f       	adc	r31, r25
    209c:	61 93       	st	Z+, r22
    209e:	71 93       	st	Z+, r23
    20a0:	02 97       	sbiw	r24, 0x02	; 2
    20a2:	8d 93       	st	X+, r24
    20a4:	9c 93       	st	X, r25
    20a6:	43 c0       	rjmp	.+134    	; 0x212e <malloc+0x152>
    20a8:	fd 01       	movw	r30, r26
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	9c 01       	movw	r18, r24
    20b0:	d9 01       	movw	r26, r18
    20b2:	10 97       	sbiw	r26, 0x00	; 0
    20b4:	a1 f6       	brne	.-88     	; 0x205e <malloc+0x82>
    20b6:	80 91 82 00 	lds	r24, 0x0082
    20ba:	90 91 83 00 	lds	r25, 0x0083
    20be:	89 2b       	or	r24, r25
    20c0:	41 f4       	brne	.+16     	; 0x20d2 <malloc+0xf6>
    20c2:	80 91 6d 00 	lds	r24, 0x006D
    20c6:	90 91 6e 00 	lds	r25, 0x006E
    20ca:	90 93 83 00 	sts	0x0083, r25
    20ce:	80 93 82 00 	sts	0x0082, r24
    20d2:	40 91 6f 00 	lds	r20, 0x006F
    20d6:	50 91 70 00 	lds	r21, 0x0070
    20da:	41 15       	cp	r20, r1
    20dc:	51 05       	cpc	r21, r1
    20de:	41 f4       	brne	.+16     	; 0x20f0 <malloc+0x114>
    20e0:	4d b7       	in	r20, 0x3d	; 61
    20e2:	5e b7       	in	r21, 0x3e	; 62
    20e4:	80 91 6b 00 	lds	r24, 0x006B
    20e8:	90 91 6c 00 	lds	r25, 0x006C
    20ec:	48 1b       	sub	r20, r24
    20ee:	59 0b       	sbc	r21, r25
    20f0:	20 91 82 00 	lds	r18, 0x0082
    20f4:	30 91 83 00 	lds	r19, 0x0083
    20f8:	24 17       	cp	r18, r20
    20fa:	35 07       	cpc	r19, r21
    20fc:	b0 f4       	brcc	.+44     	; 0x212a <malloc+0x14e>
    20fe:	ca 01       	movw	r24, r20
    2100:	82 1b       	sub	r24, r18
    2102:	93 0b       	sbc	r25, r19
    2104:	86 17       	cp	r24, r22
    2106:	97 07       	cpc	r25, r23
    2108:	80 f0       	brcs	.+32     	; 0x212a <malloc+0x14e>
    210a:	ab 01       	movw	r20, r22
    210c:	4e 5f       	subi	r20, 0xFE	; 254
    210e:	5f 4f       	sbci	r21, 0xFF	; 255
    2110:	84 17       	cp	r24, r20
    2112:	95 07       	cpc	r25, r21
    2114:	50 f0       	brcs	.+20     	; 0x212a <malloc+0x14e>
    2116:	42 0f       	add	r20, r18
    2118:	53 1f       	adc	r21, r19
    211a:	50 93 83 00 	sts	0x0083, r21
    211e:	40 93 82 00 	sts	0x0082, r20
    2122:	f9 01       	movw	r30, r18
    2124:	61 93       	st	Z+, r22
    2126:	71 93       	st	Z+, r23
    2128:	02 c0       	rjmp	.+4      	; 0x212e <malloc+0x152>
    212a:	e0 e0       	ldi	r30, 0x00	; 0
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	cf 01       	movw	r24, r30
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	08 95       	ret

00002136 <free>:
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	09 f4       	brne	.+2      	; 0x2140 <free+0xa>
    213e:	50 c0       	rjmp	.+160    	; 0x21e0 <free+0xaa>
    2140:	ec 01       	movw	r28, r24
    2142:	22 97       	sbiw	r28, 0x02	; 2
    2144:	1b 82       	std	Y+3, r1	; 0x03
    2146:	1a 82       	std	Y+2, r1	; 0x02
    2148:	a0 91 84 00 	lds	r26, 0x0084
    214c:	b0 91 85 00 	lds	r27, 0x0085
    2150:	10 97       	sbiw	r26, 0x00	; 0
    2152:	09 f1       	breq	.+66     	; 0x2196 <free+0x60>
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	ac 17       	cp	r26, r28
    215a:	bd 07       	cpc	r27, r29
    215c:	08 f1       	brcs	.+66     	; 0x21a0 <free+0x6a>
    215e:	bb 83       	std	Y+3, r27	; 0x03
    2160:	aa 83       	std	Y+2, r26	; 0x02
    2162:	fe 01       	movw	r30, r28
    2164:	21 91       	ld	r18, Z+
    2166:	31 91       	ld	r19, Z+
    2168:	e2 0f       	add	r30, r18
    216a:	f3 1f       	adc	r31, r19
    216c:	ae 17       	cp	r26, r30
    216e:	bf 07       	cpc	r27, r31
    2170:	79 f4       	brne	.+30     	; 0x2190 <free+0x5a>
    2172:	8d 91       	ld	r24, X+
    2174:	9c 91       	ld	r25, X
    2176:	11 97       	sbiw	r26, 0x01	; 1
    2178:	28 0f       	add	r18, r24
    217a:	39 1f       	adc	r19, r25
    217c:	2e 5f       	subi	r18, 0xFE	; 254
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	39 83       	std	Y+1, r19	; 0x01
    2182:	28 83       	st	Y, r18
    2184:	12 96       	adiw	r26, 0x02	; 2
    2186:	8d 91       	ld	r24, X+
    2188:	9c 91       	ld	r25, X
    218a:	13 97       	sbiw	r26, 0x03	; 3
    218c:	9b 83       	std	Y+3, r25	; 0x03
    218e:	8a 83       	std	Y+2, r24	; 0x02
    2190:	41 15       	cp	r20, r1
    2192:	51 05       	cpc	r21, r1
    2194:	71 f4       	brne	.+28     	; 0x21b2 <free+0x7c>
    2196:	d0 93 85 00 	sts	0x0085, r29
    219a:	c0 93 84 00 	sts	0x0084, r28
    219e:	20 c0       	rjmp	.+64     	; 0x21e0 <free+0xaa>
    21a0:	12 96       	adiw	r26, 0x02	; 2
    21a2:	8d 91       	ld	r24, X+
    21a4:	9c 91       	ld	r25, X
    21a6:	13 97       	sbiw	r26, 0x03	; 3
    21a8:	ad 01       	movw	r20, r26
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	11 f0       	breq	.+4      	; 0x21b2 <free+0x7c>
    21ae:	dc 01       	movw	r26, r24
    21b0:	d3 cf       	rjmp	.-90     	; 0x2158 <free+0x22>
    21b2:	fa 01       	movw	r30, r20
    21b4:	d3 83       	std	Z+3, r29	; 0x03
    21b6:	c2 83       	std	Z+2, r28	; 0x02
    21b8:	21 91       	ld	r18, Z+
    21ba:	31 91       	ld	r19, Z+
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	ce 17       	cp	r28, r30
    21c2:	df 07       	cpc	r29, r31
    21c4:	69 f4       	brne	.+26     	; 0x21e0 <free+0xaa>
    21c6:	88 81       	ld	r24, Y
    21c8:	99 81       	ldd	r25, Y+1	; 0x01
    21ca:	28 0f       	add	r18, r24
    21cc:	39 1f       	adc	r19, r25
    21ce:	2e 5f       	subi	r18, 0xFE	; 254
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	fa 01       	movw	r30, r20
    21d4:	31 83       	std	Z+1, r19	; 0x01
    21d6:	20 83       	st	Z, r18
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret

000021e6 <sprintf>:
    21e6:	ae e0       	ldi	r26, 0x0E	; 14
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e9 ef       	ldi	r30, 0xF9	; 249
    21ec:	f0 e1       	ldi	r31, 0x10	; 16
    21ee:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__prologue_saves__+0x1c>
    21f2:	0d 89       	ldd	r16, Y+21	; 0x15
    21f4:	1e 89       	ldd	r17, Y+22	; 0x16
    21f6:	86 e0       	ldi	r24, 0x06	; 6
    21f8:	8c 83       	std	Y+4, r24	; 0x04
    21fa:	1a 83       	std	Y+2, r17	; 0x02
    21fc:	09 83       	std	Y+1, r16	; 0x01
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	9f e7       	ldi	r25, 0x7F	; 127
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	9e 01       	movw	r18, r28
    2208:	27 5e       	subi	r18, 0xE7	; 231
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	ce 01       	movw	r24, r28
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	6f 89       	ldd	r22, Y+23	; 0x17
    2212:	78 8d       	ldd	r23, Y+24	; 0x18
    2214:	a9 01       	movw	r20, r18
    2216:	0e 94 17 11 	call	0x222e	; 0x222e <vfprintf>
    221a:	2f 81       	ldd	r18, Y+7	; 0x07
    221c:	38 85       	ldd	r19, Y+8	; 0x08
    221e:	02 0f       	add	r16, r18
    2220:	13 1f       	adc	r17, r19
    2222:	f8 01       	movw	r30, r16
    2224:	10 82       	st	Z, r1
    2226:	2e 96       	adiw	r28, 0x0e	; 14
    2228:	e4 e0       	ldi	r30, 0x04	; 4
    222a:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__epilogue_restores__+0x1c>

0000222e <vfprintf>:
    222e:	ab e0       	ldi	r26, 0x0B	; 11
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ed e1       	ldi	r30, 0x1D	; 29
    2234:	f1 e1       	ldi	r31, 0x11	; 17
    2236:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
    223a:	3c 01       	movw	r6, r24
    223c:	2b 01       	movw	r4, r22
    223e:	5a 01       	movw	r10, r20
    2240:	fc 01       	movw	r30, r24
    2242:	17 82       	std	Z+7, r1	; 0x07
    2244:	16 82       	std	Z+6, r1	; 0x06
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	81 fd       	sbrc	r24, 1
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <vfprintf+0x24>
    224c:	6f ef       	ldi	r22, 0xFF	; 255
    224e:	7f ef       	ldi	r23, 0xFF	; 255
    2250:	c6 c1       	rjmp	.+908    	; 0x25de <vfprintf+0x3b0>
    2252:	9a e0       	ldi	r25, 0x0A	; 10
    2254:	89 2e       	mov	r8, r25
    2256:	1e 01       	movw	r2, r28
    2258:	08 94       	sec
    225a:	21 1c       	adc	r2, r1
    225c:	31 1c       	adc	r3, r1
    225e:	f3 01       	movw	r30, r6
    2260:	23 81       	ldd	r18, Z+3	; 0x03
    2262:	f2 01       	movw	r30, r4
    2264:	23 fd       	sbrc	r18, 3
    2266:	85 91       	lpm	r24, Z+
    2268:	23 ff       	sbrs	r18, 3
    226a:	81 91       	ld	r24, Z+
    226c:	2f 01       	movw	r4, r30
    226e:	88 23       	and	r24, r24
    2270:	09 f4       	brne	.+2      	; 0x2274 <vfprintf+0x46>
    2272:	b2 c1       	rjmp	.+868    	; 0x25d8 <vfprintf+0x3aa>
    2274:	85 32       	cpi	r24, 0x25	; 37
    2276:	39 f4       	brne	.+14     	; 0x2286 <vfprintf+0x58>
    2278:	23 fd       	sbrc	r18, 3
    227a:	85 91       	lpm	r24, Z+
    227c:	23 ff       	sbrs	r18, 3
    227e:	81 91       	ld	r24, Z+
    2280:	2f 01       	movw	r4, r30
    2282:	85 32       	cpi	r24, 0x25	; 37
    2284:	29 f4       	brne	.+10     	; 0x2290 <vfprintf+0x62>
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	b3 01       	movw	r22, r6
    228a:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    228e:	e7 cf       	rjmp	.-50     	; 0x225e <vfprintf+0x30>
    2290:	98 2f       	mov	r25, r24
    2292:	ff 24       	eor	r15, r15
    2294:	ee 24       	eor	r14, r14
    2296:	99 24       	eor	r9, r9
    2298:	ff e1       	ldi	r31, 0x1F	; 31
    229a:	ff 15       	cp	r31, r15
    229c:	d0 f0       	brcs	.+52     	; 0x22d2 <vfprintf+0xa4>
    229e:	9b 32       	cpi	r25, 0x2B	; 43
    22a0:	69 f0       	breq	.+26     	; 0x22bc <vfprintf+0x8e>
    22a2:	9c 32       	cpi	r25, 0x2C	; 44
    22a4:	28 f4       	brcc	.+10     	; 0x22b0 <vfprintf+0x82>
    22a6:	90 32       	cpi	r25, 0x20	; 32
    22a8:	59 f0       	breq	.+22     	; 0x22c0 <vfprintf+0x92>
    22aa:	93 32       	cpi	r25, 0x23	; 35
    22ac:	91 f4       	brne	.+36     	; 0x22d2 <vfprintf+0xa4>
    22ae:	0e c0       	rjmp	.+28     	; 0x22cc <vfprintf+0x9e>
    22b0:	9d 32       	cpi	r25, 0x2D	; 45
    22b2:	49 f0       	breq	.+18     	; 0x22c6 <vfprintf+0x98>
    22b4:	90 33       	cpi	r25, 0x30	; 48
    22b6:	69 f4       	brne	.+26     	; 0x22d2 <vfprintf+0xa4>
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	24 c0       	rjmp	.+72     	; 0x2304 <vfprintf+0xd6>
    22bc:	52 e0       	ldi	r21, 0x02	; 2
    22be:	f5 2a       	or	r15, r21
    22c0:	84 e0       	ldi	r24, 0x04	; 4
    22c2:	f8 2a       	or	r15, r24
    22c4:	28 c0       	rjmp	.+80     	; 0x2316 <vfprintf+0xe8>
    22c6:	98 e0       	ldi	r25, 0x08	; 8
    22c8:	f9 2a       	or	r15, r25
    22ca:	25 c0       	rjmp	.+74     	; 0x2316 <vfprintf+0xe8>
    22cc:	e0 e1       	ldi	r30, 0x10	; 16
    22ce:	fe 2a       	or	r15, r30
    22d0:	22 c0       	rjmp	.+68     	; 0x2316 <vfprintf+0xe8>
    22d2:	f7 fc       	sbrc	r15, 7
    22d4:	29 c0       	rjmp	.+82     	; 0x2328 <vfprintf+0xfa>
    22d6:	89 2f       	mov	r24, r25
    22d8:	80 53       	subi	r24, 0x30	; 48
    22da:	8a 30       	cpi	r24, 0x0A	; 10
    22dc:	70 f4       	brcc	.+28     	; 0x22fa <vfprintf+0xcc>
    22de:	f6 fe       	sbrs	r15, 6
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <vfprintf+0xbe>
    22e2:	98 9c       	mul	r9, r8
    22e4:	90 2c       	mov	r9, r0
    22e6:	11 24       	eor	r1, r1
    22e8:	98 0e       	add	r9, r24
    22ea:	15 c0       	rjmp	.+42     	; 0x2316 <vfprintf+0xe8>
    22ec:	e8 9c       	mul	r14, r8
    22ee:	e0 2c       	mov	r14, r0
    22f0:	11 24       	eor	r1, r1
    22f2:	e8 0e       	add	r14, r24
    22f4:	f0 e2       	ldi	r31, 0x20	; 32
    22f6:	ff 2a       	or	r15, r31
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <vfprintf+0xe8>
    22fa:	9e 32       	cpi	r25, 0x2E	; 46
    22fc:	29 f4       	brne	.+10     	; 0x2308 <vfprintf+0xda>
    22fe:	f6 fc       	sbrc	r15, 6
    2300:	6b c1       	rjmp	.+726    	; 0x25d8 <vfprintf+0x3aa>
    2302:	40 e4       	ldi	r20, 0x40	; 64
    2304:	f4 2a       	or	r15, r20
    2306:	07 c0       	rjmp	.+14     	; 0x2316 <vfprintf+0xe8>
    2308:	9c 36       	cpi	r25, 0x6C	; 108
    230a:	19 f4       	brne	.+6      	; 0x2312 <vfprintf+0xe4>
    230c:	50 e8       	ldi	r21, 0x80	; 128
    230e:	f5 2a       	or	r15, r21
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <vfprintf+0xe8>
    2312:	98 36       	cpi	r25, 0x68	; 104
    2314:	49 f4       	brne	.+18     	; 0x2328 <vfprintf+0xfa>
    2316:	f2 01       	movw	r30, r4
    2318:	23 fd       	sbrc	r18, 3
    231a:	95 91       	lpm	r25, Z+
    231c:	23 ff       	sbrs	r18, 3
    231e:	91 91       	ld	r25, Z+
    2320:	2f 01       	movw	r4, r30
    2322:	99 23       	and	r25, r25
    2324:	09 f0       	breq	.+2      	; 0x2328 <vfprintf+0xfa>
    2326:	b8 cf       	rjmp	.-144    	; 0x2298 <vfprintf+0x6a>
    2328:	89 2f       	mov	r24, r25
    232a:	85 54       	subi	r24, 0x45	; 69
    232c:	83 30       	cpi	r24, 0x03	; 3
    232e:	18 f0       	brcs	.+6      	; 0x2336 <vfprintf+0x108>
    2330:	80 52       	subi	r24, 0x20	; 32
    2332:	83 30       	cpi	r24, 0x03	; 3
    2334:	38 f4       	brcc	.+14     	; 0x2344 <vfprintf+0x116>
    2336:	44 e0       	ldi	r20, 0x04	; 4
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	a4 0e       	add	r10, r20
    233c:	b5 1e       	adc	r11, r21
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	59 83       	std	Y+1, r21	; 0x01
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <vfprintf+0x134>
    2344:	93 36       	cpi	r25, 0x63	; 99
    2346:	31 f0       	breq	.+12     	; 0x2354 <vfprintf+0x126>
    2348:	93 37       	cpi	r25, 0x73	; 115
    234a:	79 f0       	breq	.+30     	; 0x236a <vfprintf+0x13c>
    234c:	93 35       	cpi	r25, 0x53	; 83
    234e:	09 f0       	breq	.+2      	; 0x2352 <vfprintf+0x124>
    2350:	56 c0       	rjmp	.+172    	; 0x23fe <vfprintf+0x1d0>
    2352:	20 c0       	rjmp	.+64     	; 0x2394 <vfprintf+0x166>
    2354:	f5 01       	movw	r30, r10
    2356:	80 81       	ld	r24, Z
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	42 e0       	ldi	r20, 0x02	; 2
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	a4 0e       	add	r10, r20
    2360:	b5 1e       	adc	r11, r21
    2362:	61 01       	movw	r12, r2
    2364:	01 e0       	ldi	r16, 0x01	; 1
    2366:	10 e0       	ldi	r17, 0x00	; 0
    2368:	12 c0       	rjmp	.+36     	; 0x238e <vfprintf+0x160>
    236a:	f5 01       	movw	r30, r10
    236c:	c0 80       	ld	r12, Z
    236e:	d1 80       	ldd	r13, Z+1	; 0x01
    2370:	f6 fc       	sbrc	r15, 6
    2372:	03 c0       	rjmp	.+6      	; 0x237a <vfprintf+0x14c>
    2374:	6f ef       	ldi	r22, 0xFF	; 255
    2376:	7f ef       	ldi	r23, 0xFF	; 255
    2378:	02 c0       	rjmp	.+4      	; 0x237e <vfprintf+0x150>
    237a:	69 2d       	mov	r22, r9
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	42 e0       	ldi	r20, 0x02	; 2
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	a4 0e       	add	r10, r20
    2384:	b5 1e       	adc	r11, r21
    2386:	c6 01       	movw	r24, r12
    2388:	0e 94 ff 12 	call	0x25fe	; 0x25fe <strnlen>
    238c:	8c 01       	movw	r16, r24
    238e:	5f e7       	ldi	r21, 0x7F	; 127
    2390:	f5 22       	and	r15, r21
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <vfprintf+0x18e>
    2394:	f5 01       	movw	r30, r10
    2396:	c0 80       	ld	r12, Z
    2398:	d1 80       	ldd	r13, Z+1	; 0x01
    239a:	f6 fc       	sbrc	r15, 6
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <vfprintf+0x176>
    239e:	6f ef       	ldi	r22, 0xFF	; 255
    23a0:	7f ef       	ldi	r23, 0xFF	; 255
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <vfprintf+0x17a>
    23a4:	69 2d       	mov	r22, r9
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	42 e0       	ldi	r20, 0x02	; 2
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	a4 0e       	add	r10, r20
    23ae:	b5 1e       	adc	r11, r21
    23b0:	c6 01       	movw	r24, r12
    23b2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <strnlen_P>
    23b6:	8c 01       	movw	r16, r24
    23b8:	50 e8       	ldi	r21, 0x80	; 128
    23ba:	f5 2a       	or	r15, r21
    23bc:	f3 fe       	sbrs	r15, 3
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <vfprintf+0x1a0>
    23c0:	1a c0       	rjmp	.+52     	; 0x23f6 <vfprintf+0x1c8>
    23c2:	80 e2       	ldi	r24, 0x20	; 32
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	b3 01       	movw	r22, r6
    23c8:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    23cc:	ea 94       	dec	r14
    23ce:	8e 2d       	mov	r24, r14
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	08 17       	cp	r16, r24
    23d4:	19 07       	cpc	r17, r25
    23d6:	a8 f3       	brcs	.-22     	; 0x23c2 <vfprintf+0x194>
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <vfprintf+0x1c8>
    23da:	f6 01       	movw	r30, r12
    23dc:	f7 fc       	sbrc	r15, 7
    23de:	85 91       	lpm	r24, Z+
    23e0:	f7 fe       	sbrs	r15, 7
    23e2:	81 91       	ld	r24, Z+
    23e4:	6f 01       	movw	r12, r30
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	b3 01       	movw	r22, r6
    23ea:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    23ee:	e1 10       	cpse	r14, r1
    23f0:	ea 94       	dec	r14
    23f2:	01 50       	subi	r16, 0x01	; 1
    23f4:	10 40       	sbci	r17, 0x00	; 0
    23f6:	01 15       	cp	r16, r1
    23f8:	11 05       	cpc	r17, r1
    23fa:	79 f7       	brne	.-34     	; 0x23da <vfprintf+0x1ac>
    23fc:	ea c0       	rjmp	.+468    	; 0x25d2 <vfprintf+0x3a4>
    23fe:	94 36       	cpi	r25, 0x64	; 100
    2400:	11 f0       	breq	.+4      	; 0x2406 <vfprintf+0x1d8>
    2402:	99 36       	cpi	r25, 0x69	; 105
    2404:	69 f5       	brne	.+90     	; 0x2460 <vfprintf+0x232>
    2406:	f7 fe       	sbrs	r15, 7
    2408:	08 c0       	rjmp	.+16     	; 0x241a <vfprintf+0x1ec>
    240a:	f5 01       	movw	r30, r10
    240c:	20 81       	ld	r18, Z
    240e:	31 81       	ldd	r19, Z+1	; 0x01
    2410:	42 81       	ldd	r20, Z+2	; 0x02
    2412:	53 81       	ldd	r21, Z+3	; 0x03
    2414:	84 e0       	ldi	r24, 0x04	; 4
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0a c0       	rjmp	.+20     	; 0x242e <vfprintf+0x200>
    241a:	f5 01       	movw	r30, r10
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	9c 01       	movw	r18, r24
    2422:	44 27       	eor	r20, r20
    2424:	37 fd       	sbrc	r19, 7
    2426:	40 95       	com	r20
    2428:	54 2f       	mov	r21, r20
    242a:	82 e0       	ldi	r24, 0x02	; 2
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a8 0e       	add	r10, r24
    2430:	b9 1e       	adc	r11, r25
    2432:	9f e6       	ldi	r25, 0x6F	; 111
    2434:	f9 22       	and	r15, r25
    2436:	57 ff       	sbrs	r21, 7
    2438:	09 c0       	rjmp	.+18     	; 0x244c <vfprintf+0x21e>
    243a:	50 95       	com	r21
    243c:	40 95       	com	r20
    243e:	30 95       	com	r19
    2440:	21 95       	neg	r18
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	4f 4f       	sbci	r20, 0xFF	; 255
    2446:	5f 4f       	sbci	r21, 0xFF	; 255
    2448:	e0 e8       	ldi	r30, 0x80	; 128
    244a:	fe 2a       	or	r15, r30
    244c:	ca 01       	movw	r24, r20
    244e:	b9 01       	movw	r22, r18
    2450:	a1 01       	movw	r20, r2
    2452:	2a e0       	ldi	r18, 0x0A	; 10
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	0e 94 36 13 	call	0x266c	; 0x266c <__ultoa_invert>
    245a:	d8 2e       	mov	r13, r24
    245c:	d2 18       	sub	r13, r2
    245e:	40 c0       	rjmp	.+128    	; 0x24e0 <vfprintf+0x2b2>
    2460:	95 37       	cpi	r25, 0x75	; 117
    2462:	29 f4       	brne	.+10     	; 0x246e <vfprintf+0x240>
    2464:	1f 2d       	mov	r17, r15
    2466:	1f 7e       	andi	r17, 0xEF	; 239
    2468:	2a e0       	ldi	r18, 0x0A	; 10
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	1d c0       	rjmp	.+58     	; 0x24a8 <vfprintf+0x27a>
    246e:	1f 2d       	mov	r17, r15
    2470:	19 7f       	andi	r17, 0xF9	; 249
    2472:	9f 36       	cpi	r25, 0x6F	; 111
    2474:	61 f0       	breq	.+24     	; 0x248e <vfprintf+0x260>
    2476:	90 37       	cpi	r25, 0x70	; 112
    2478:	20 f4       	brcc	.+8      	; 0x2482 <vfprintf+0x254>
    247a:	98 35       	cpi	r25, 0x58	; 88
    247c:	09 f0       	breq	.+2      	; 0x2480 <vfprintf+0x252>
    247e:	ac c0       	rjmp	.+344    	; 0x25d8 <vfprintf+0x3aa>
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <vfprintf+0x272>
    2482:	90 37       	cpi	r25, 0x70	; 112
    2484:	39 f0       	breq	.+14     	; 0x2494 <vfprintf+0x266>
    2486:	98 37       	cpi	r25, 0x78	; 120
    2488:	09 f0       	breq	.+2      	; 0x248c <vfprintf+0x25e>
    248a:	a6 c0       	rjmp	.+332    	; 0x25d8 <vfprintf+0x3aa>
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <vfprintf+0x268>
    248e:	28 e0       	ldi	r18, 0x08	; 8
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	0a c0       	rjmp	.+20     	; 0x24a8 <vfprintf+0x27a>
    2494:	10 61       	ori	r17, 0x10	; 16
    2496:	14 fd       	sbrc	r17, 4
    2498:	14 60       	ori	r17, 0x04	; 4
    249a:	20 e1       	ldi	r18, 0x10	; 16
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <vfprintf+0x27a>
    24a0:	14 fd       	sbrc	r17, 4
    24a2:	16 60       	ori	r17, 0x06	; 6
    24a4:	20 e1       	ldi	r18, 0x10	; 16
    24a6:	32 e0       	ldi	r19, 0x02	; 2
    24a8:	17 ff       	sbrs	r17, 7
    24aa:	08 c0       	rjmp	.+16     	; 0x24bc <vfprintf+0x28e>
    24ac:	f5 01       	movw	r30, r10
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	44 e0       	ldi	r20, 0x04	; 4
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	08 c0       	rjmp	.+16     	; 0x24cc <vfprintf+0x29e>
    24bc:	f5 01       	movw	r30, r10
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	bc 01       	movw	r22, r24
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	42 e0       	ldi	r20, 0x02	; 2
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	a4 0e       	add	r10, r20
    24ce:	b5 1e       	adc	r11, r21
    24d0:	a1 01       	movw	r20, r2
    24d2:	0e 94 36 13 	call	0x266c	; 0x266c <__ultoa_invert>
    24d6:	d8 2e       	mov	r13, r24
    24d8:	d2 18       	sub	r13, r2
    24da:	8f e7       	ldi	r24, 0x7F	; 127
    24dc:	f8 2e       	mov	r15, r24
    24de:	f1 22       	and	r15, r17
    24e0:	f6 fe       	sbrs	r15, 6
    24e2:	0b c0       	rjmp	.+22     	; 0x24fa <vfprintf+0x2cc>
    24e4:	5e ef       	ldi	r21, 0xFE	; 254
    24e6:	f5 22       	and	r15, r21
    24e8:	d9 14       	cp	r13, r9
    24ea:	38 f4       	brcc	.+14     	; 0x24fa <vfprintf+0x2cc>
    24ec:	f4 fe       	sbrs	r15, 4
    24ee:	07 c0       	rjmp	.+14     	; 0x24fe <vfprintf+0x2d0>
    24f0:	f2 fc       	sbrc	r15, 2
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <vfprintf+0x2d0>
    24f4:	8f ee       	ldi	r24, 0xEF	; 239
    24f6:	f8 22       	and	r15, r24
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <vfprintf+0x2d0>
    24fa:	1d 2d       	mov	r17, r13
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <vfprintf+0x2d2>
    24fe:	19 2d       	mov	r17, r9
    2500:	f4 fe       	sbrs	r15, 4
    2502:	0d c0       	rjmp	.+26     	; 0x251e <vfprintf+0x2f0>
    2504:	fe 01       	movw	r30, r28
    2506:	ed 0d       	add	r30, r13
    2508:	f1 1d       	adc	r31, r1
    250a:	80 81       	ld	r24, Z
    250c:	80 33       	cpi	r24, 0x30	; 48
    250e:	19 f4       	brne	.+6      	; 0x2516 <vfprintf+0x2e8>
    2510:	99 ee       	ldi	r25, 0xE9	; 233
    2512:	f9 22       	and	r15, r25
    2514:	08 c0       	rjmp	.+16     	; 0x2526 <vfprintf+0x2f8>
    2516:	1f 5f       	subi	r17, 0xFF	; 255
    2518:	f2 fe       	sbrs	r15, 2
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <vfprintf+0x2f8>
    251c:	03 c0       	rjmp	.+6      	; 0x2524 <vfprintf+0x2f6>
    251e:	8f 2d       	mov	r24, r15
    2520:	86 78       	andi	r24, 0x86	; 134
    2522:	09 f0       	breq	.+2      	; 0x2526 <vfprintf+0x2f8>
    2524:	1f 5f       	subi	r17, 0xFF	; 255
    2526:	0f 2d       	mov	r16, r15
    2528:	f3 fc       	sbrc	r15, 3
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <vfprintf+0x326>
    252c:	f0 fe       	sbrs	r15, 0
    252e:	0f c0       	rjmp	.+30     	; 0x254e <vfprintf+0x320>
    2530:	1e 15       	cp	r17, r14
    2532:	10 f0       	brcs	.+4      	; 0x2538 <vfprintf+0x30a>
    2534:	9d 2c       	mov	r9, r13
    2536:	0b c0       	rjmp	.+22     	; 0x254e <vfprintf+0x320>
    2538:	9d 2c       	mov	r9, r13
    253a:	9e 0c       	add	r9, r14
    253c:	91 1a       	sub	r9, r17
    253e:	1e 2d       	mov	r17, r14
    2540:	06 c0       	rjmp	.+12     	; 0x254e <vfprintf+0x320>
    2542:	80 e2       	ldi	r24, 0x20	; 32
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	b3 01       	movw	r22, r6
    2548:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    254c:	1f 5f       	subi	r17, 0xFF	; 255
    254e:	1e 15       	cp	r17, r14
    2550:	c0 f3       	brcs	.-16     	; 0x2542 <vfprintf+0x314>
    2552:	04 c0       	rjmp	.+8      	; 0x255c <vfprintf+0x32e>
    2554:	1e 15       	cp	r17, r14
    2556:	10 f4       	brcc	.+4      	; 0x255c <vfprintf+0x32e>
    2558:	e1 1a       	sub	r14, r17
    255a:	01 c0       	rjmp	.+2      	; 0x255e <vfprintf+0x330>
    255c:	ee 24       	eor	r14, r14
    255e:	04 ff       	sbrs	r16, 4
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <vfprintf+0x352>
    2562:	80 e3       	ldi	r24, 0x30	; 48
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	b3 01       	movw	r22, r6
    2568:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    256c:	02 ff       	sbrs	r16, 2
    256e:	1d c0       	rjmp	.+58     	; 0x25aa <vfprintf+0x37c>
    2570:	01 fd       	sbrc	r16, 1
    2572:	03 c0       	rjmp	.+6      	; 0x257a <vfprintf+0x34c>
    2574:	88 e7       	ldi	r24, 0x78	; 120
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e c0       	rjmp	.+28     	; 0x2596 <vfprintf+0x368>
    257a:	88 e5       	ldi	r24, 0x58	; 88
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0b c0       	rjmp	.+22     	; 0x2596 <vfprintf+0x368>
    2580:	80 2f       	mov	r24, r16
    2582:	86 78       	andi	r24, 0x86	; 134
    2584:	91 f0       	breq	.+36     	; 0x25aa <vfprintf+0x37c>
    2586:	01 ff       	sbrs	r16, 1
    2588:	02 c0       	rjmp	.+4      	; 0x258e <vfprintf+0x360>
    258a:	8b e2       	ldi	r24, 0x2B	; 43
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <vfprintf+0x362>
    258e:	80 e2       	ldi	r24, 0x20	; 32
    2590:	f7 fc       	sbrc	r15, 7
    2592:	8d e2       	ldi	r24, 0x2D	; 45
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	b3 01       	movw	r22, r6
    2598:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <vfprintf+0x37c>
    259e:	80 e3       	ldi	r24, 0x30	; 48
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	b3 01       	movw	r22, r6
    25a4:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    25a8:	9a 94       	dec	r9
    25aa:	d9 14       	cp	r13, r9
    25ac:	c0 f3       	brcs	.-16     	; 0x259e <vfprintf+0x370>
    25ae:	da 94       	dec	r13
    25b0:	f1 01       	movw	r30, r2
    25b2:	ed 0d       	add	r30, r13
    25b4:	f1 1d       	adc	r31, r1
    25b6:	80 81       	ld	r24, Z
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	b3 01       	movw	r22, r6
    25bc:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    25c0:	dd 20       	and	r13, r13
    25c2:	a9 f7       	brne	.-22     	; 0x25ae <vfprintf+0x380>
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <vfprintf+0x3a4>
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	b3 01       	movw	r22, r6
    25cc:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    25d0:	ea 94       	dec	r14
    25d2:	ee 20       	and	r14, r14
    25d4:	c1 f7       	brne	.-16     	; 0x25c6 <vfprintf+0x398>
    25d6:	43 ce       	rjmp	.-890    	; 0x225e <vfprintf+0x30>
    25d8:	f3 01       	movw	r30, r6
    25da:	66 81       	ldd	r22, Z+6	; 0x06
    25dc:	77 81       	ldd	r23, Z+7	; 0x07
    25de:	cb 01       	movw	r24, r22
    25e0:	2b 96       	adiw	r28, 0x0b	; 11
    25e2:	e2 e1       	ldi	r30, 0x12	; 18
    25e4:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

000025e8 <strnlen_P>:
    25e8:	fc 01       	movw	r30, r24
    25ea:	05 90       	lpm	r0, Z+
    25ec:	61 50       	subi	r22, 0x01	; 1
    25ee:	70 40       	sbci	r23, 0x00	; 0
    25f0:	01 10       	cpse	r0, r1
    25f2:	d8 f7       	brcc	.-10     	; 0x25ea <strnlen_P+0x2>
    25f4:	80 95       	com	r24
    25f6:	90 95       	com	r25
    25f8:	8e 0f       	add	r24, r30
    25fa:	9f 1f       	adc	r25, r31
    25fc:	08 95       	ret

000025fe <strnlen>:
    25fe:	fc 01       	movw	r30, r24
    2600:	61 50       	subi	r22, 0x01	; 1
    2602:	70 40       	sbci	r23, 0x00	; 0
    2604:	01 90       	ld	r0, Z+
    2606:	01 10       	cpse	r0, r1
    2608:	d8 f7       	brcc	.-10     	; 0x2600 <strnlen+0x2>
    260a:	80 95       	com	r24
    260c:	90 95       	com	r25
    260e:	8e 0f       	add	r24, r30
    2610:	9f 1f       	adc	r25, r31
    2612:	08 95       	ret

00002614 <fputc>:
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	8c 01       	movw	r16, r24
    261e:	eb 01       	movw	r28, r22
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	81 ff       	sbrs	r24, 1
    2624:	1b c0       	rjmp	.+54     	; 0x265c <fputc+0x48>
    2626:	82 ff       	sbrs	r24, 2
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <fputc+0x30>
    262a:	2e 81       	ldd	r18, Y+6	; 0x06
    262c:	3f 81       	ldd	r19, Y+7	; 0x07
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	28 17       	cp	r18, r24
    2634:	39 07       	cpc	r19, r25
    2636:	64 f4       	brge	.+24     	; 0x2650 <fputc+0x3c>
    2638:	e8 81       	ld	r30, Y
    263a:	f9 81       	ldd	r31, Y+1	; 0x01
    263c:	01 93       	st	Z+, r16
    263e:	f9 83       	std	Y+1, r31	; 0x01
    2640:	e8 83       	st	Y, r30
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <fputc+0x3c>
    2644:	e8 85       	ldd	r30, Y+8	; 0x08
    2646:	f9 85       	ldd	r31, Y+9	; 0x09
    2648:	80 2f       	mov	r24, r16
    264a:	09 95       	icall
    264c:	89 2b       	or	r24, r25
    264e:	31 f4       	brne	.+12     	; 0x265c <fputc+0x48>
    2650:	8e 81       	ldd	r24, Y+6	; 0x06
    2652:	9f 81       	ldd	r25, Y+7	; 0x07
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	9f 83       	std	Y+7, r25	; 0x07
    2658:	8e 83       	std	Y+6, r24	; 0x06
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <fputc+0x4c>
    265c:	0f ef       	ldi	r16, 0xFF	; 255
    265e:	1f ef       	ldi	r17, 0xFF	; 255
    2660:	c8 01       	movw	r24, r16
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	08 95       	ret

0000266c <__ultoa_invert>:
    266c:	fa 01       	movw	r30, r20
    266e:	aa 27       	eor	r26, r26
    2670:	28 30       	cpi	r18, 0x08	; 8
    2672:	51 f1       	breq	.+84     	; 0x26c8 <__ultoa_invert+0x5c>
    2674:	20 31       	cpi	r18, 0x10	; 16
    2676:	81 f1       	breq	.+96     	; 0x26d8 <__ultoa_invert+0x6c>
    2678:	e8 94       	clt
    267a:	6f 93       	push	r22
    267c:	6e 7f       	andi	r22, 0xFE	; 254
    267e:	6e 5f       	subi	r22, 0xFE	; 254
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	8f 4f       	sbci	r24, 0xFF	; 255
    2684:	9f 4f       	sbci	r25, 0xFF	; 255
    2686:	af 4f       	sbci	r26, 0xFF	; 255
    2688:	b1 e0       	ldi	r27, 0x01	; 1
    268a:	3e d0       	rcall	.+124    	; 0x2708 <__ultoa_invert+0x9c>
    268c:	b4 e0       	ldi	r27, 0x04	; 4
    268e:	3c d0       	rcall	.+120    	; 0x2708 <__ultoa_invert+0x9c>
    2690:	67 0f       	add	r22, r23
    2692:	78 1f       	adc	r23, r24
    2694:	89 1f       	adc	r24, r25
    2696:	9a 1f       	adc	r25, r26
    2698:	a1 1d       	adc	r26, r1
    269a:	68 0f       	add	r22, r24
    269c:	79 1f       	adc	r23, r25
    269e:	8a 1f       	adc	r24, r26
    26a0:	91 1d       	adc	r25, r1
    26a2:	a1 1d       	adc	r26, r1
    26a4:	6a 0f       	add	r22, r26
    26a6:	71 1d       	adc	r23, r1
    26a8:	81 1d       	adc	r24, r1
    26aa:	91 1d       	adc	r25, r1
    26ac:	a1 1d       	adc	r26, r1
    26ae:	20 d0       	rcall	.+64     	; 0x26f0 <__ultoa_invert+0x84>
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <__ultoa_invert+0x48>
    26b2:	68 94       	set
    26b4:	3f 91       	pop	r19
    26b6:	2a e0       	ldi	r18, 0x0A	; 10
    26b8:	26 9f       	mul	r18, r22
    26ba:	11 24       	eor	r1, r1
    26bc:	30 19       	sub	r19, r0
    26be:	30 5d       	subi	r19, 0xD0	; 208
    26c0:	31 93       	st	Z+, r19
    26c2:	de f6       	brtc	.-74     	; 0x267a <__ultoa_invert+0xe>
    26c4:	cf 01       	movw	r24, r30
    26c6:	08 95       	ret
    26c8:	46 2f       	mov	r20, r22
    26ca:	47 70       	andi	r20, 0x07	; 7
    26cc:	40 5d       	subi	r20, 0xD0	; 208
    26ce:	41 93       	st	Z+, r20
    26d0:	b3 e0       	ldi	r27, 0x03	; 3
    26d2:	0f d0       	rcall	.+30     	; 0x26f2 <__ultoa_invert+0x86>
    26d4:	c9 f7       	brne	.-14     	; 0x26c8 <__ultoa_invert+0x5c>
    26d6:	f6 cf       	rjmp	.-20     	; 0x26c4 <__ultoa_invert+0x58>
    26d8:	46 2f       	mov	r20, r22
    26da:	4f 70       	andi	r20, 0x0F	; 15
    26dc:	40 5d       	subi	r20, 0xD0	; 208
    26de:	4a 33       	cpi	r20, 0x3A	; 58
    26e0:	18 f0       	brcs	.+6      	; 0x26e8 <__ultoa_invert+0x7c>
    26e2:	49 5d       	subi	r20, 0xD9	; 217
    26e4:	31 fd       	sbrc	r19, 1
    26e6:	40 52       	subi	r20, 0x20	; 32
    26e8:	41 93       	st	Z+, r20
    26ea:	02 d0       	rcall	.+4      	; 0x26f0 <__ultoa_invert+0x84>
    26ec:	a9 f7       	brne	.-22     	; 0x26d8 <__ultoa_invert+0x6c>
    26ee:	ea cf       	rjmp	.-44     	; 0x26c4 <__ultoa_invert+0x58>
    26f0:	b4 e0       	ldi	r27, 0x04	; 4
    26f2:	a6 95       	lsr	r26
    26f4:	97 95       	ror	r25
    26f6:	87 95       	ror	r24
    26f8:	77 95       	ror	r23
    26fa:	67 95       	ror	r22
    26fc:	ba 95       	dec	r27
    26fe:	c9 f7       	brne	.-14     	; 0x26f2 <__ultoa_invert+0x86>
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	61 05       	cpc	r22, r1
    2704:	71 05       	cpc	r23, r1
    2706:	08 95       	ret
    2708:	9b 01       	movw	r18, r22
    270a:	ac 01       	movw	r20, r24
    270c:	0a 2e       	mov	r0, r26
    270e:	06 94       	lsr	r0
    2710:	57 95       	ror	r21
    2712:	47 95       	ror	r20
    2714:	37 95       	ror	r19
    2716:	27 95       	ror	r18
    2718:	ba 95       	dec	r27
    271a:	c9 f7       	brne	.-14     	; 0x270e <__ultoa_invert+0xa2>
    271c:	62 0f       	add	r22, r18
    271e:	73 1f       	adc	r23, r19
    2720:	84 1f       	adc	r24, r20
    2722:	95 1f       	adc	r25, r21
    2724:	a0 1d       	adc	r26, r0
    2726:	08 95       	ret

00002728 <_exit>:
    2728:	f8 94       	cli

0000272a <__stop_program>:
    272a:	ff cf       	rjmp	.-2      	; 0x272a <__stop_program>
